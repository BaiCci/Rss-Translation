<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>开发社区👩‍💻👨‍💻：Davide Santangelo</title><description> DEV 社区 👩‍💻👨‍💻 上的最新文章，作者是 Davide Santangelo (@daviducolo)。</description><link/> https://dev.to/daviducolo<image/><url> https://res.cloudinary.com/practicaldev/image/fetch/s--NjqSqeaj--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com /uploads/user/profile_image/2717/1445be1a-9ad4-4b8e-a617-5ee32761493c.jpeg</url><title>开发社区👩‍💻👨‍💻：Davide Santangelo</title><link/> https://dev.to/daviducolo <atom:link href="https://dev.to/feed/daviducolo.rss" rel="self" type="application/rss+xml"></atom:link><language>恩</language><item><title>嵌套的 ActiveRecord 事务</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Thu, 09 Feb 2023 13:55:39 +0000</pubDate><link/> https://dev.to/daviducolo/nested-activerecord-transactions-199n<guid> https://dev.to/daviducolo/nested-activerecord-transactions-199n</guid><description> &lt;p>;嵌套的 ActiveRecord 事务是许多 Ruby on Rails 应用程序中的常见功能，它提供了一种方便的方式来处理复杂的数据事务并确保数据的一致性。但是，如果使用不当，嵌套事务可能会导致意外行为和数据不一致。本文将重点介绍使用嵌套 ActiveRecord 事务的一些陷阱以及如何避免它们。&lt;/p>; &lt;h2>; 嵌套事务可能导致死锁 &lt;/h2>; &lt;p>;当两个或多个事务试图访问同时使用相同的数据库资源，每个事务都在等待另一个事务完成，从而导致冻结状态。在嵌套事务中，如果其中一个事务失败，会导致整个事务回滚，但其他事务可能还在等待资源，导致死锁。为了避免这种情况，建议避免使用过多的嵌套事务，并将事务的数量限制在合理的水平。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class= &quot;突出显示 ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;create_user_and_post&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class =&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;事务&lt;/span>; &lt;span class=&quot;k&quot;>;执行&lt;/span>; &lt;span class=&quot;c1&quot;>;#创建用户&lt;/span >; &lt;span class=&quot;n&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;用户&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt; /span>;&lt;span class=&quot;nf&quot;>;创建！&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;名称：&lt;/span>;&lt;span class=&quot;s2 &quot;>;&quot;Davide Santangelo&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# 创建帖子&lt;/span>; &lt;span class=&quot;no&quot;>;发布&lt;/span >;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;事务&lt;/span>; &lt;span class=&quot;k&quot;>;执行&lt;/span>; &lt;span class=&quot;c1&quot;>;#创建发布&lt;/span>; &lt;span class=&quot;n&quot;>;发布&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;用户&lt;/span>;&lt;span class=&quot;p &quot;>;.&lt;/span >;&lt;span class=&quot;nf&quot;>;posts&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;创建！&lt;/span>;&lt;span class=&quot;p&quot;>;( &lt;/span>;&lt;span class=&quot;ss&quot;>;标题：&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Hello World&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class =&quot;c1&quot;>;#模拟失败&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/ span>;&lt;span class=&quot;no&quot;>;回滚&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>;&lt;span class=&quot;p&quot;>;。 &lt;/span>;&lt;span class=&quot;nf&quot;>;title&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello World&quot;&lt;/span>; &lt;span class =&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;c1&quot;>;#模拟失败&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span >;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;回滚&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;用户&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;名称&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2 &quot;>;&quot;Davide Santangelo&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p >;在这个例子中e、如果内层事务失败，外层事务也会回滚，但是post还是会创建，导致死锁。为避免这种情况，建议避免使用过多的嵌套事务并将事务的数量限制在合理的水平。&lt;/p>; &lt;h2>; 嵌套事务会导致不一致&lt;/h2>; &lt;p>;嵌套事务会导致提交内部事务但回滚外部事务时的不一致。例如，如果一个内部事务更新了一条记录，而外部事务回滚了，那么即使整个事务应该被回滚，该记录也会保持更新状态。为避免这种情况，建议在内部事务中使用保存点，这将允许您回滚到事务中的特定点，而不是回滚整个事务。&lt;br>; &lt;/p>; &lt;div class=&quot; highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;update_user_and_post&lt;/span>; &lt;span class= &quot;no&quot;>;用户&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;交易&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;c1&quot;>;#查找用户&lt;/span>; &lt;span class=&quot;n&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;用户&lt;/ span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;查找&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1 &lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;#更新用户&lt;/span>; &lt;span class=&quot;n&quot;>;用户&lt;/span>;&lt;span class=&quot; p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;更新！&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;名称：&lt;/span>;&lt; span class=&quot;s2&quot;>;&quot;Davide Santangelo&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;no&quot;>;发布&lt;/span>;&lt;span class=&quot;p&quot; >;.&lt;/span>;&lt;span class=&quot;nf&quot;>;transaction&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# find post&lt;/span>; &lt;span class =&quot;n&quot;>;发布&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;用户&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt; span class=&quot;nf&quot;>;posts&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;first&lt;/span>; &lt;span class=&quot;c1&quot;>;# update post&lt; /span>; &lt;span class=&quot;n&quot;>;发布&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;更新！&lt;/span>;&lt;span class=&quot;p&quot; >;(&lt;/span>;&lt;span class=&quot;ss&quot;>;title: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Hello Universe&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt; span class=&quot;c1&quot;>;#模拟失败&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;:: &lt;/span>;&lt;span class=&quot;no&quot;>;回滚&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>;&lt;span class=&quot;p&quot; >;.&lt;/span>;&lt;span class=&quot;nf&quot;>;title&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello Universe&quot;&lt;/span>; &lt; span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;#模拟失败&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveReco rd&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;回滚&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot; n&quot;>;用户&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;名称&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Davide Santangelo&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/ div>; &lt;p>;在这个例子中，如果内部事务失败，帖子仍然会更新，导致不一致。为避免这种情况，建议在内部事务中使用保存点，这将允许您回滚到事务中的特定点，而不是回滚整个事务。&lt;/p>; &lt;h2>; 嵌套事务会影响性能问题&lt;/h2>; &lt;p>;嵌套事务会导致性能问题，尤其是当有许多嵌套事务时，因为每个事务都需要一个单独的数据库连接。这会导致开销增加和性能下降，尤其是在处理大量数据时。为避免这种情况，建议仅在必要时谨慎使用事务。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;update_user_and_post&lt;/span>; &lt;span class=&quot;no&quot;>;用户&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>; &lt;span class=&quot;nf&quot;>;事务&lt;/span>; &lt;span class=&quot;k&quot;>;执行&lt;/span>; &lt;span class=&quot;c1&quot;>;#查找用户&lt;/span>; &lt;span class=&quot;n&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;用户&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot; >;找到&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot; c1&quot;>;#更新用户&lt;/span>; &lt;span class=&quot;n&quot;>;用户&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;更新！&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;姓名：&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;大卫·桑坦杰洛&quot;&lt;/span>;&lt;span class=&quot;p&quot; >;)&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Base&lt;/span>;&lt;span class= &quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;交易&lt;/span>;&lt;span cl ass=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;保存点：&lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span >; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;c1&quot;>;#查找帖子&lt;/span>; &lt;span class=&quot;n&quot;>;发布&lt;/span>; &lt;span class=&quot;o&quot;>; =&lt;/span>; &lt;span class=&quot;n&quot;>;用户&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;帖子&lt;/span>;&lt;span class=&quot;p &quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;first&lt;/span>; &lt;span class=&quot;c1&quot;>;# update post&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;更新！&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;title: &lt;/ span>;&lt;span class=&quot;s2&quot;>;&quot;Hello Universe&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;#模拟失败&lt;/span>; &lt;span class= &quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;回滚&lt;/span>; &lt; span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;title&lt;/span >; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello Universe&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;c1 &quot;>;#模拟失败&lt;/spa n>; &lt;span class=&quot;k&quot;>;提高&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;回滚&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf &quot;>;name&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Davide Santangelo&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;通过保存点，对帖子的更新会回滚，而对用户的更新会保留，避免任何不一致。&lt;/p>; &lt;h2>; 最后一个例子 &lt;/h2>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k &quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;BankAccount&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class =&quot;n&quot;>;has_many&lt;/span>; &lt;span class=&quot;ss&quot;>;:transactions&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;transfer&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;到&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;金额&lt;/跨度&lt;跨度cl ass=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;交易&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;nb&quot;>;自己&lt;/span>; &lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;余额&lt;/span>; &lt;span class=&quot;o&quot;>;-=&lt;/span>; &lt;span class=&quot;n&quot;>;金额&lt; /span>; &lt;span class=&quot;nb&quot;>;self&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;保存！&lt;/span>; &lt;span class=&quot;n&quot; >;交易&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;n&quot;>;到&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot; nf&quot;>;余额&lt;/span>; &lt;span class=&quot;o&quot;>;+=&lt;/span>; &lt;span class=&quot;n&quot;>;金额&lt;/span>; &lt;span class=&quot;n&quot;>;到&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;保存！&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span >; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;在这个例子中，传输方法传输通过执行两个数据库操作将钱从一个银行账户转移到另一个银行账户：减少当前账户的余额和增加目标账户的余额。为了确保这两个操作都是原子的，并且在任何一个失败时都可以回滚，该方法使用嵌套事务。&lt;/p>; &lt;p>;外部事务块使用 ActiveRecord 提供的事务方法，它打开一个数据库事务。如果块内出现任何异常，事务将自动回滚并丢弃块内所做的更改。&lt;/p>; &lt;p>;内部事务块在外部事务的上下文中执行第二个数据库操作。这意味着如果在内部事务块中引发异常，则整个事务（包括外部事务和内部事务）都将回滚，以确保数据库保持一致状态。&lt;/p>; &lt;p>;请注意在这个例子中，保存！使用方法而不是保存方法。拯救！如果模型验证失败，方法会引发异常，而在这种情况下，save 方法只会返回 false。通过使用 save!，该方法确保在两个保存操作中的任何一个失败时引发异常，从而触发事务回滚。&lt;/p>; &lt;h2>; 结论 &lt;/h2>; &lt;p>;总而言之，嵌套的 ActiveRecord 事务可以成为确保 Ruby on Rails 应用程序中数据一致性的强大工具，但重要的是要了解潜在的陷阱并谨慎使用它们。通过了解这些陷阱，您可以避免死锁和不一致，并确保您的事务顺利、正确地执行。&lt;/p>;</description><category>红宝石</category><category>铁轨</category><category>初学者</category><category>表现</category></item><item><title>Rails 模型验证：包含代码示例的综合指南</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Thu, 02 Feb 2023 07:45:11 +0000</pubDate><link/> https://dev.to/daviducolo/rails-model-validation-a-comprehensive-guide-with-code-examples-21mh<guid> https://dev.to/daviducolo/rails-model-validation-a-comprehensive-guide-with-code-examples-21mh</guid><description> &lt;p>;Ruby on Rails 提供了多种内置验证方法，有助于确保存储在数据库中的数据是一致的并符合特定条件。这些验证可以直接在您的模型文件中指定，使它们易于管理和维护。&lt;/p>; &lt;p>;以下是 Rails 中可用的一些最常见的验证方法：&lt;/p>; &lt;h2>; 存在验证 &lt;/ h2>; &lt;p>;最简单的验证类型是存在验证，它确保特定字段不为空。例如，如果要确保 User 模型的名称字段始终存在，则可以编写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class =&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt; span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:name&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/ span>; &lt;span class=&quot;ss&quot;>;存在：&lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; 长度验证&lt;/h2>; &lt;p>;另一种常见的验证类型是长度验证，它限制字符串字段的长度。例如，如果要确保用户模型的密码字段长度至少为 8 个字符，则可以编写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;类&lt;/span>; &lt;span class=&quot;nc&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/ span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:password&lt;/span>;&lt;span class=&quot;p&quot;>; ,&lt;/span>; &lt;span class=&quot;ss&quot;>;长度：&lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;最小值：&lt;/span>;&lt;span class= &quot;mi&quot;>;8&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;您还可以指定字段的最大长度，或最小和最大长度：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;代码>;&lt;span class=&quot;k&quot;>;类&lt;/span>; &lt;span class=&quot;nc&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>; ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:passwor d&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;长度：&lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot; ss&quot;>;最小值：&lt;/span>;&lt;span class=&quot;mi&quot;>;8&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;最大值：&lt;/span>;&lt; span class=&quot;mi&quot;>;20&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; 格式验证&lt;/h2>; &lt;p>;格式验证用于确保字段匹配特定模式，例如特定电子邮件格式或邮政编码格式。例如，如果要确保用户模型的电子邮件字段格式正确，您可以编写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt; pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;类&lt;/span>; &lt;span class=&quot;nc&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span >; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:email&lt;/span>;&lt;span class=&quot;p&quot;>;, &lt;/span>; &lt;span class=&quot;ss&quot;>;格式：&lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;与：&lt;/span>;&lt;span class=&quot; sr&quot;>;/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[az]{2,})\z/i&lt;/span>;&lt; span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;on: :create&lt;/span>; &lt;span class=&quot;p&quot;>;&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; 唯一性验证&lt;/h2>; &lt;p>;唯一性验证可确保特定字段在数据库中的所有记录中都是唯一的。例如，如果要确保 User 模型的 email 字段是唯一的，则可以编写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class= &quot;高亮红宝石&quot;>;&lt;c​​ode>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:email&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span >; &lt;span class=&quot;ss&quot;>;唯一性：&lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt; /div>; &lt;h2>; 数值验证&lt;/h2>; &lt;p>;数值验证确保特定字段是数字。您还可以指定额外的约束条件，例如确保数字大于或等于某个值，或者它是一个整数。例如，如果要保证User模型的age字段是一个大于等于18的数字，可以这样写：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code- highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt ;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:age&lt;/span>;&lt;span class=&quot; p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;数值：&lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;大于或等于：&lt;/span>;&lt; span class=&quot;mi&quot;>;18&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; 确认验证&lt;/h2>; &lt;p>;确认验证确保一个字段被第二个字段确认。例如，如果你想确保用户通过两次输入密码来确认他们的密码，你可以编写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class =&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt; span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:password&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/ span>; &lt;span class=&quot;ss&quot;>;确认：&lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;在视图中，您将有两个字段，一个用于密码，一个用于确认，确认字段将命名为&lt;strong>;password_confirmation&lt;/strong>;。&lt;/p>; &lt;h2>;包含验证&lt;/h2>; &lt;p>;包含验证用于确保某个字段包含在一组特定的值中。例如，如果你想确保用户模型有一个角色字段是 &lt;strong>;admin&lt;/strong>;、&lt;strong>;moderator&lt;/strong>; 或 &lt;strong>;member&lt;/strong>;，你可以这样写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt; span class=&quot;nc&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/ span>; &lt;span class=&quot;ss&quot;>;:role&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;包含：&lt;/span>;&lt;span class=&quot;p&quot; >;{&lt;/span>; &lt;span class=&quot;ss&quot;>;在：&lt;/span>;&lt;span class=&quot;sx&quot;>;%w（管理员版主成员）&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;p&quot;>;} span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; 排除验证&lt;/h2>; &lt;p>;排除验证用于确保一个字段不是包含在一组特定的值中。例如，如果要确保 User 模型没有 &lt;strong>;admin&lt;/strong>; 或 &lt;strong>;root&lt;/strong>; 的角色字段，则可以编写以下代码：&lt;br>; &lt;/ p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;类&lt;/span>; &lt;span class=&quot;nc&quot;>;用户&lt; /span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot; >;：角色&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;排除：&lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class =&quot;ss&quot;>;在：&lt;/span>;&lt;span class=&quot;sx&quot;>;%w（admin root）&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>; end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; 自定义消息验证&lt;/h2>; &lt;p>;您还可以为每个验证指定自定义错误消息。例如，如果您想在用户模型的电子邮件格式不正确时显示自定义错误消息，您可以编写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot; >; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt; /span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:email&lt;/span>;&lt;span class=&quot;p&quot; >;,&lt;/span>; &lt;span class=&quot;ss&quot;>;格式：&lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;带：&lt;/span>;&lt;span class =&quot;sr&quot;>;/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[az]{2,})\z/i&lt;/span >;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;消息：&lt;/span>;&lt;span class=&quot;s2&quot;>;“不是有效的电子邮件地址”&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>;条件验证&lt;/h2>; &lt;p>;条件验证允许您指定仅当满足特定条件时才应进行验证。您可以使用 &lt;strong>;if&lt;/strong>; 选项指定条件。例如，如果你想确保用户模型的密码长度至少为 8 个字符，只有当密码字段不为 nil 时，你可以编写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js- code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;类&lt;/span>; &lt;span class=&quot;nc&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot; >;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:password&lt;/span>;&lt;span class =&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;长度：&lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;最小值：&lt;/span >;&lt;span class=&quot;mi&quot;>;8&lt;/span>; &lt;span class=&quot;p&quot;>;},&lt;/span>; &lt;span class=&quot;ss&quot;>;if: :password_not_nil&lt;/span>; &lt;span class=&quot;kp &quot;>;private&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;password_not_nil&lt;/span>; &lt;span class=&quot;n&quot;>;密码&lt;/span>;&lt;span class= &quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;现在？&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt; /code>;&lt;/pre>; &lt;/div>; &lt;h2>; 多重验证 &lt;/h2>; &lt;p>;你可以对一个 sin 使用多重验证通过将验证链接在一起来生成 gle 字段。例如，如果您想确保用户模型的电子邮件存在、格式正确且唯一，您可以编写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code- highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt ;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:email&lt;/span>;&lt;span class=&quot; p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;存在：&lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;格式：&lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;with: &lt;/span>;&lt;span class=&quot;sr&quot;>;/\A ([^@\s]+)@((?:[-a-z0-9]+\.)+[az]{2,})\z/i&lt;/span>; &lt;span class=&quot;p&quot; >;},&lt;/span>; &lt;span class=&quot;ss&quot;>;唯一性：&lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code >;&lt;/pre>; &lt;/div>; &lt;h2>; 自定义验证&lt;/h2>; &lt;p>;除了内置的验证方法，Rails 还允许您创建自定义验证。例如，如果要确保用户模型具有唯一的名字和姓氏组合，您可以编写自定义验证方法：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot; >; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt; /span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:unique_name&lt;/span>; &lt;span class=&quot;k&quot; >;def&lt;/span>; &lt;span class=&quot;nf&quot;>;unique_name&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;no&quot;>;用户&lt;/span>;&lt;span class=&quot; p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;存在吗？&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;名字：&lt;/span>;&lt; span class=&quot;n&quot;>;名字&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;姓氏：&lt;/span>;&lt;span class=&quot;n&quot;>;姓氏&lt;/span>; span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;错误&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;添加&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;:first_name&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2 “>;”和啦st 名称已被占用&quot;&lt;/​​span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;或者如果你想确保 User 模型的名字总是大写，你可以这样写代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class =&quot;nc&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/span>; &lt;span class=&quot;ss&quot;>;:name_must_be_capitalized&lt;/span>; &lt;span class=&quot;kp&quot;>;private&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;name_must_be_capitalized&lt; /span>; &lt;span class=&quot;n&quot;>;错误&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;添加&lt;/span>;&lt;span class=&quot;p&quot;>; (&lt;/span>;&lt;span class=&quot;ss&quot;>;:name&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;必须大写&quot;&lt;/span>;&lt; span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;除非&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span >;&lt;水疗中心n class=&quot;nf&quot;>;nil?&lt;/span>; &lt;span class=&quot;o&quot;>;||&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>; &lt;span class=&quot;o&quot;>;== &lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;大写&lt;/span>; &lt;span class=&quot;k&quot; >;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Association Validation &lt;/h2>; &lt;p>;除了验证单个模型，您还可以验证模型之间的关联。关联验证允许您为依赖于其他模型状态的模型指定验证。&lt;/p>; &lt;p>;例如，如果一个用户模型有很多帖子，您可以验证一个用户必须至少有一个帖子之前它可以保存到数据库中。您将编写以下代码：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/ span>; &lt;span class=&quot;nc&quot;>;用户&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>; has_many&lt;/span>; &lt;span class=&quot;ss&quot;>;:posts&lt;/span>; &lt;span class=&quot;n&quot;>;validates_associated&lt;/span>; &lt;span class=&quot;ss&quot;>;:posts&lt;/span>; &lt;span class= &quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;发布&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt; span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;belongs_to&lt;/span>; &lt;span class=&quot;ss&quot;>;:user&lt;/span>; &lt;span class=&quot;n&quot;>;验证&lt;/ span>; &lt;span class=&quot;ss&quot;>;:title&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;存在：&lt;/span>;&lt;span class=&quot;kp&quot; >;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;在这个例子中，用户不会被保存到数据库，除非它有至少一个带有标题的相关帖子。&lt;/p>; &lt;h2>; 结论&lt;/h2>; &lt;p>;总而言之，验证是一个重要的部分任何 Rails 应用程序。通过使用验证，您可以确保您的数据始终准确、一致并符合您指定的标准。 &lt;/p>; &lt;p>;无论您是验证单个模型还是模型之间的关联，Rails 都可以轻松指定和执行您的验证规则。借助 Rails 验证的强大功能，您可以使应用程序更加健壮和可靠，确保用户输入的数据始终准确一致。&lt;/p>; &lt;p>;有关 Rails 验证的更多信息和完整指南，请访问位于 &lt;a href=&quot;https://guides.rubyonrails.org/active_record_validations.html&quot;>;https://guides.rubyonrails.org/active_record_validations.html&lt;/a>; 的官方 Ruby on Rails 文档。&lt;/p>;</description><category>铁轨</category><category>红宝石</category><category>教程</category><category>初学者</category></item><item><title>Rails“db:....”命令解释！</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Thu, 26 Jan 2023 08:33:34 +0000</pubDate><link/> https://dev.to/daviducolo/rails-db-commands-explained-22mf<guid> https://dev.to/daviducolo/rails-db-commands-explained-22mf</guid><description> &lt;p>;当您在 Rails 项目中运行 &lt;strong>;rails&lt;/strong>; 命令时，您将获得可在 Rails 应用程序中启动的所有命令的列表。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight shell&quot;>;&lt;code>;rails 最常用的 rails 命令是： generate 生成新代码 &lt;span class=&quot;o&quot;>;(&lt;/span>;short-cut &lt;span class =&quot;nb&quot;>;别名&lt;/span>;: &lt;span class=&quot;s2&quot;>;&quot;g&quot;&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; console 启动Rails控制台&lt;span class=&quot;o &quot;>;(&lt;/span>;快捷方式&lt;span class=&quot;nb&quot;>;别名&lt;/span>;：&lt;span class=&quot;s2&quot;>;&quot;c&quot;&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/ span>; server 启动 Rails 服务器 &lt;span class=&quot;o&quot;>;(&lt;/span>;short-cut &lt;span class=&quot;nb&quot;>;alias&lt;/span>;: &lt;span class=&quot;s2&quot;>;&quot;s&quot;&lt;/ span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>;test &lt;/span>;运行除系统测试之外的测试 &lt;span class=&quot;o&quot;>;(&lt;/span>;short-cut &lt; span class=&quot;nb&quot;>;别名&lt;/span>;：&lt;span class=&quot;s2&quot;>;&quot;t&quot;&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>;测试&lt;/span>;:system 运行系统测试 dbconsole 启动控制台 &lt;span class=&quot;k&quot;>;for &lt;/span>;指定的数据库 &lt;span class=&quot;k&quot;>;在 &lt;/span>;config/database.yml &lt;span class=&quot;o&quot;>;(&lt;/span>;short-cut &lt;span class=&quot;nb&quot;>;alias &lt;/span>;: &lt;span class=&quot;s2&quot;>;&quot;db&quot;&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; new 创建一个新的 Rails 应用程序。 &lt;span class=&quot;s2&quot;>;&quot;rails new my_app&quot;&lt;/span>; 创建一个名为 MyApp 的新应用 &lt;span class=&quot;k&quot;>;in&lt;/span>; &lt;span class=&quot;s2&quot;>;./my_app&quot;&lt; /span>; plugin new 创建一个新的 Rails railtie 或 engine 所有命令都可以使用 &lt;span class=&quot;nt&quot;>;-h&lt;/span>; &lt;span class=&quot;o&quot;>;(&lt;/span>; 或 &lt;span class= &quot;nt&quot;>;--help&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;&lt;/span>;更多信息。除了这些命令，还有：资产：干净[保持]资产：clobber资产：环境资产：预编译缓存摘要：依赖缓存摘要：嵌套依赖凭证：差异凭证：编辑凭证：显示数据库：创建数据库：删除数据库：加密：初始化数据库：环境：设置数据库：固定装置：加载 db:migrate db:migrate:down db:migrate:redo db:migrate:status db:migrate:up db:prepare db:reset db:rollback db:schema:cache:clear db:schema:cache:dump db:schema :dump db:schema:load db:seed db:seed:replant db:setup db:system:change db:version destroy dev:cache encrypted:edit encrypted:show importmap:install initializers log:clear middleware notes restart routes runner secret 秘密：编辑秘密：设置秘密：显示统计刺激：安装刺激：insta ll:importmap stimulus:install:node tailwindcss:build tailwindcss:clobber tailwindcss:install tailwindcss:watch &lt;span class=&quot;nb&quot;>;test&lt;/span>;:all &lt;span class=&quot;nb&quot;>;test&lt;/span>;:db &lt;span class=&quot;nb&quot;>;time&lt;/span>;:zones[country_or_offset] tmp:clear tmp:create turbo:install turbo:install:importmap turbo:install:node turbo:install:redis 版本 yarn:install zeitwerk:check &lt; /code>;&lt;/pre>; &lt;/div>; &lt;p>;本文只分析&lt;strong>;db命令&lt;/strong>;。你可以通过运行得到它们：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;rails | grep db：&lt;/code>;&lt;/pre>; &lt;/div>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;db:drop db:encryption:init db:环境：设置数据库：固定装置：加载数据库：迁移数据库：迁移：向下数据库：迁移：重做数据库：迁移：状态数据库：迁移：向上数据库：准备数据库：重置数据库：回滚数据库：架构：缓存：清除数据库：架构:cache:dump db:schema:dump db:schema:load db:seed db:seed:replant db:setup db:system:change db:version &lt;/code>;&lt;/pre>; &lt;/div>; &lt;ul>; &lt;li >;&lt;p>;&lt;strong>;db:create&lt;/strong>;：此命令用于创建一个与您的 Rails 应用程序中指定的当前环境（例如开发、生产）同名的新数据库。&lt;/p>;&lt;/ li>; &lt;li>;&lt;p>;&lt;strong>;db:drop&lt;/strong>;：此命令用于删除与 Rails 应用程序中指定的当前环境同名的现有数据库。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:encryption:init&lt;/strong>;：此命令用于加密 Rails 应用程序中的数据库凭据。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;数据库：环境：设置&lt;/strong>;：此命令用于设置 Rails 应用程序的当前环境。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:fixtures:load&lt;/strong>;: 此命令用于加载固定装置（预-定义的数据）到 Rails 应用程序的数据库中。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:migrate&lt;/strong>;：此命令用于为 Rails 运行任何待处理的数据库迁移应用程序。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:migrate:down&lt;/strong>;：此命令用于回滚 Rails 应用程序的最后一次迁移。&lt;/p>;&lt;/li >; &lt;li>;&lt;p>;&lt;strong>;db:migrate:redo&lt;/strong>;：此命令用于回滚上次迁移并为您的 Rails 应用程序再次运行它。&lt;/p>;&lt;/li>; &lt;li>;&lt; p>;&lt;strong>;db:migrate:status&lt;/strong>;：此命令用于检查 Rails 应用程序的迁移状态。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:migrate :up&lt;/strong>;：此命令用于为您的 Rails 应用程序运行特定的迁移。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:prepare&lt;/strong>;：此命令用于为 t 准备数据库Rails 应用程序中的当前环境。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:reset&lt;/strong>;：此命令用于删除和创建与当前环境同名的数据库Rails 应用程序中指定的环境。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:rollback&lt;/strong>;：此命令用于回滚 Rails 应用程序的最后一次迁移。&lt;/p>; &lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:schema:cache:clear&lt;/strong>;：此命令用于清除 Rails 应用程序的模式缓存。&lt;/p>;&lt;/li>; &lt;li>; &lt;p>;&lt;strong>;db:schema:cache:dump&lt;/strong>;：此命令用于将模式缓存转储到 Rails 应用程序的文件中。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt; strong>;db:schema:dump&lt;/strong>;：此命令用于将数据库的当前模式转储为 Rails 应用程序的 Ruby 文件。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>; db:schema:load&lt;/strong>;：此命令用于将模式文件加载到 Rails 应用程序的数据库中。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:seed&lt;/strong >;: 该命令用于加载种子数据&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:seed:replant&lt;/strong>;：此命令用于将种子数据重新加载到 Rails 应用程序的数据库中.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:setup&lt;/strong>;：此命令用于为您的 Rails 应用程序创建、加载模式和种子数据到数据库中。&lt;/p >;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:system:change&lt;/strong>;：此命令用于更改 Rails 应用程序的数据库系统。&lt;/p>;&lt;/li>; &lt;li>;&lt; p>;&lt;strong>;db:version&lt;/strong>;：此命令用于检查 Rails 应用程序的迁移版本。&lt;/p>;&lt;/li>; &lt;/ul>; &lt;p>;总而言之，各种 Rails讨论过的命令，例如 db:create、db:migrate、db:seed 用于管理 Rails 应用程序的数据库并与之交互。它们允许开发人员创建、修改和播种数据库，以及为应用程序的不同部分生成样板代码。 &lt;/p>; &lt;p>;这些命令是可以大大简化开发过程的强大工具，但重要的是要谨慎使用它们，并确保在对应用程序进行任何更改之前进行适当的备份或版本控制。理解和使用这些命令可以帮助开发人员更有效地构建和维护他们的 Rails 应用程序。&lt;/p>;</description></item><item><title>对 Ruby 中内存泄漏的“浅”探究</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Fri, 20 Jan 2023 08:50:49 +0000</pubDate><link/> https://dev.to/daviducolo/memory-leak-and-ruby-a1m<guid> https://dev.to/daviducolo/memory-leak-and-ruby-a1m</guid><description> &lt;h2>; 简介 &lt;/h2>; &lt;p>;内存泄漏是一种软件错误，其中程序或应用程序不断分配内存但未能正确释放它，导致内存使用量随时间增加。如果可用内存资源耗尽，这可能会导致程序崩溃或冻结。内存泄漏可能发生在任何编程语言中，但由于手动内存管理，在 C 和 C++ 程序中尤为常见。内存泄漏的常见原因包括无法释放不再需要的内存，或者创建循环引用，其中两个对象相互引用并阻止内存管理器释放它们的内存。内存泄漏可能难以检测和修复，但内存分析器和泄漏检测器等工具可以提供帮助。&lt;/p>; &lt;p>;内存泄漏也可能发生在使用自动内存管理的系统中，例如使用垃圾收集的系统。在这些系统中，当垃圾收集器无法确定一块内存不再使用并因此无法释放它时，可能会发生内存泄漏。&lt;/p>; &lt;p>;内存泄漏可能会产生严重的后果，例如导致程序变慢或崩溃，或导致系统变得不稳定或无响应。在某些情况下，内存泄漏甚至会导致安全漏洞，因为它会导致程序分配过多的内存以耗尽可用资源并导致其他程序失败。&lt;/p>; &lt;p>;检测和修复内存泄漏，开发人员可以使用内存分析器和泄漏检测器等工具。这些工具可以提供有关内存使用情况的信息，并可以帮助识别泄漏源。此外，良好的编程实践（例如适当的内存管理以及使用智能指针、RAII 和垃圾回收）也有助于防止内存泄漏。&lt;/p>; &lt;p>;重要的是要注意内存泄漏并不总是容易检测和修复，并且可能需要大量的时间和精力来解决。但是，识别和解决内存泄漏对于任何程序或应用程序的稳定性和性能都至关重要。&lt;/p>; &lt;p>;在像 &lt;strong>;Ruby&lt;/strong>; 这样的垃圾收集语言中，当对象不存在时，可能会发生内存泄漏由垃圾收集器正确清理。&lt;/p>; &lt;p>;在 Ruby 中有几种可能发生内存泄漏的方式，包括：&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Circular references：发生循环引用当两个或多个对象相互引用时。这可以防止垃圾收集器清理对象，从而导致内存泄漏。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;长寿命对象：不再需要但不再需要的对象由垃圾收集器正确清理，可能导致内存泄漏。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;事件处理程序：未正确注销的事件处理程序可能导致内存泄漏。&lt;/p>; &lt;/li>; &lt;li>;&lt;p>;单例：单例对象，如果管理不当，会导致内存泄漏。&lt;/p>;&lt;/li>; &lt;/ol>; &lt;h2>; 技术 &lt;/h2>; &lt;p>;为避免 Ruby 中的内存泄漏，了解内存泄漏可能发生的方式并使用最佳实践来防止它们很重要。&lt;/p>; &lt;p>;避免循环引用的一种方法是使用弱引用。弱引用是一种不会阻止垃圾收集器清理对象的引用。在 Ruby 中，&lt;strong>;WeakRef&lt;/strong>; 类提供了一种创建弱引用的方法。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>; &lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;weakref&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;类&lt;/span>; &lt;span class=&quot;nc &quot;>;Foo&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;初始化&lt;/span>; &lt;span class=&quot;vi&quot;>;@bar&lt;/span>; &lt;span class =&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, World!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end &lt;/span>; &lt;span class=&quot;n&quot;>;foo&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Foo&lt;/span>;&lt;span class=&quot;p&quot; >;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;weak_foo&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot; no&quot;>;WeakRef&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class =&quot;n&quot;>;foo&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;另一种避免内存泄漏的方法是使用 &lt;strong >;ObjectSpace&lt;/strong>; 模块，用于手动将对象标记为符合 GA 条件垃圾收集。这在垃圾收集器无法正确清理对象的情况下很有用。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code >;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;objspace&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>; Foo&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;初始化&lt;/span>; &lt;span class=&quot;vi&quot;>;@bar&lt;/span>; &lt;span class=&quot; o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, World!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/ span>; &lt;span class=&quot;n&quot;>;foo&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Foo&lt;/span>;&lt;span class=&quot;p&quot;>;。 &lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;no&quot;>;对象空间&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot; >;define_finalizer&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;foo&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot; nb&quot;>;proc&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;nb&quot;>;id&lt;/span>;&lt;span 类=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot; >;&quot;对象&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;nb&quot;>;id&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class =&quot;s2&quot;>; has been GCed&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;})&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;避免由于事件处理程序导致的内存泄漏, 重要的是在不再需要时注销事件处理程序。一种常见的模式是使用块并将 self 传递给块。这样，块将可以访问实例并可以注销事件处理程序。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt; span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Foo&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;初始化&lt;/span >; &lt;span class=&quot;vi&quot;>;@listener&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;事件处理程序&lt;/span>;&lt;span class=&quot;p&quot;>;。 &lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;vi&quot;>;@listener&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf &quot;>;注册&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;自己&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class= &quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;事件&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;收到事件：&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;事件&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;k&quot; >;结束&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;unregister_listen呃&lt;/span>; &lt;span class=&quot;vi&quot;>;@listener&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;注销&lt;/span>;&lt;span class=&quot; p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;self&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class =&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;最后，正确管理 Ruby 中的单例非常重要。一种方法是使用 &lt;strong>;singleton&lt;/strong>; 模块和实例方法来创建一个单例对象。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;单例&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span >; &lt;span class=&quot;nc&quot;>;Foo&lt;/span>; &lt;span class=&quot;kp&quot;>;include&lt;/span>; &lt;span class=&quot;no&quot;>;单例&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt; /span>; &lt;span class=&quot;nf&quot;>;初始化&lt;/span>; &lt;span class=&quot;vi&quot;>;@bar&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot; >;“你好，世界！”&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;foo&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Foo&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;实例&lt;/ span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Simulation &lt;/h2>; &lt;p>;模拟程序中的内存泄漏可以通过创建一个连续分配内存而不释放内存的程序来完成。下面是一个模拟内存泄漏的简单 Ruby 脚本示例：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class =&quot;c1&quot;>;#模拟内存泄漏&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[] &lt;/span>; &lt;span class=&quot;k&quot;>;同时&lt;/span>; &lt;span class=&quot;kp&quot;>;真&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;n&quot; >;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;a&quot;&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;c1&quot;>;#分配1MB of memory&lt;/span>; &lt;span class=&quot;nb&quot;>;sleep&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;c1&quot;>;#等待1秒再分配更多内存&lt; /span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;这个脚本创建了一个数组leak_array，并不断地向它附加一个1MB的字符串。这将导致程序的内存使用量不断增长，模拟内存泄漏。&lt;/p>; &lt;p>;要纠正这种内存泄漏，我们需要确保在不再需要内存时正确释放内存。一种方法是定期清空 &lt;strong>;leak_array&lt;/strong>;：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code >;&lt;span class=&quot;c1&quot;>;# 纠正内存泄漏&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p &quot;>;[]&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class =&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;a&quot;&lt;/span>; &lt;span class=&quot;o&quot;>;* &lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;nb&quot; >;sleep&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot; nf&quot;>;clear&lt;/span>; &lt;span class=&quot;c1&quot;>;#释放内存&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt; p>;纠正内存泄漏的另一种方法是使用不同的数据结构，例如队列，其中旧元素会在添加新元素时自动删除。&lt;br>; &lt;/p>; &lt;d iv class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# 纠正内存泄漏&lt;/span>; &lt;span class=&quot;nb&quot;>;require &lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;queue&#39;&lt;/span>; &lt;span class=&quot;n&quot;>;leak_queue&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot; no&quot;>;队列&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;新建&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class =&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;leak_queue&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/ span>; &lt;span class=&quot;s2&quot;>;&quot;a&quot;&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;o&quot; >;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;nb&quot;>;睡眠&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot; k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;您还可以使用&lt;strong>;GC.start&lt;/strong>; 强制进行垃圾回收并释放未使用的内存。&lt;br >; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# 纠正内存泄漏&lt;/span>; &lt;span class =&quot;n&quot;>;leak_array&lt;/span>; &lt;spa n class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[]&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;kp&quot;>;true&lt;/ span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;s2 &quot;>;&quot;a&quot;&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;nb&quot;>;睡眠&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;no&quot;>;GC&lt;/span>; &lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;开始&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div >; &lt;h2>; 结论&lt;/h2>; &lt;p>;总而言之，了解内存泄漏的原因并使用最佳实践来防止它们对于维护 Ruby 应用程序的性能和稳定性至关重要。通过使用弱引用、手动垃圾收集、取消注册事件处理程序和正确管理单例等技术，开发人员可以防止内存泄漏并确保他们的应用程序顺利运行。&lt;/p>; &lt;p>;需要注意的是，内存泄漏可能是难以检测和诊断，正确的解决方案将取决于泄漏的具体原因。监视应用程序的内存使用情况并使用诸如 &lt;strong>;ObjectSpace&lt;/strong>; 之类的工具来检查对象和追踪内存泄漏始终是一个好习惯。&lt;/p>;</description><category>红宝石</category><category>教程</category><category>表现</category><category>编程</category></item><item><title>Ruby 中的矩阵 + 图</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Tue, 10 Jan 2023 07:24:58 +0000</pubDate><link/> https://dev.to/daviducolo/matrix-graph-in-ruby-7pk<guid> https://dev.to/daviducolo/matrix-graph-in-ruby-7pk</guid><description> &lt;h2>; Ruby 中的矩阵介绍&lt;/h2>; &lt;p>;矩阵是一个二维数组。它通常用于表示和操纵数学和计算机科学中的线性变换。在 ruby​​ 中，我们可以将矩阵表示为数组的数组，每个内部数组表示矩阵的一行。&lt;/p>; &lt;p>;下面是如何在 ruby​​ 中创建矩阵的示例：&lt;br>; &lt;/ p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# 创建一个全为 0 的 3x3 矩阵&lt;/span>; &lt;span class =&quot;n&quot;>;矩阵&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt; span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span >; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;no&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;新&lt; /span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>; 0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# 创建一个具有特定值的 2x2 矩阵&lt;/span >; &lt;span class=&quot;n&quot;>;矩阵&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot;mi&quot;>;1 &lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt; /span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot; >;,&lt;/span>; &lt;span class=&quot;mi&quot;>;4&lt;/span>;&lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;c1&quot;>;#创建一个3x3单位矩阵&lt;/span >; &lt;span class=&quot;n&quot;>;矩阵&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt; /span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>; )&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;o &quot;>;|&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;新建&lt;/span>;&lt;span class= &quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;j&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;i&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;n&quot;>;j&lt;/span>; &lt;span class=&quot;p&quot;>;?&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt; /span>; &lt;span class=&quot;p&quot;>;:&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;p&quot;>; &lt;/span>; &lt; /code>;&lt;/pre>; &lt;/div>; &lt;p>;我们可以使用 [] 运算符访问矩阵的元素。例如，要获取上面矩阵的第二行第三列的元素，我们可以这样做：&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;突出显示 ruby​​&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class= &quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p >;要对矩阵执行操作，我们可以使用 ruby​​ 中矩阵库中的 Matrix 类。该类提供矩阵加减乘等运算方法。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;matrix&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# 创建两个矩阵&lt;/span>; &lt;span class=&quot;n&quot;>; matrix_a&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot; mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;4&lt;/span>; &lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_b&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;矩阵&lt; /span>;&lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot;mi&quot;>;5&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot; >;6&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;7&lt;/span>;&lt;span class= &quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;8&lt;/span>;&lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;c1&quot;>;#执行m atrix加法&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_c&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_a&lt;/span>; &lt;span class=&quot; o&quot;>;+&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_b&lt;/span>; &lt;span class=&quot;c1&quot;>;#执行矩阵乘法&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_d&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;矩阵_a&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;n&quot;>;矩阵_b&lt;/ span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; 图和矩阵&lt;/h2>; &lt;p>;图是相互连接的节点或顶点的集合，由平面上的点表示。这些节点可以通过边连接起来，边表示节点之间的关系。&lt;/p>; &lt;p>;在计算机科学中，图通常用于表示网络，例如社交网络或通信网络。它们也可以用来表示数据结构，例如树和列表。&lt;/p>; &lt;p>;在计算机算法中有两种常用的表示图的方法：邻接列表和邻接矩阵。&lt;/p>; &lt;p>;邻接list 将图形表示为链表数组。数组中的每个元素代表图中的一个节点，该元素的链表包含通过边连接到它的节点。&lt;/p>; &lt;p>;邻接矩阵是一个二维矩阵，表示一个图形。矩阵的行和列表示图中的节点，矩阵的元素表示节点之间的边。&lt;/p>; &lt;p>;下面是如何为简单图创建邻接矩阵的示例ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# 创建一个空矩阵行数和列数作为图中的节点数&lt;/span>; &lt;span class=&quot;n&quot;>;矩阵&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot; >;数组&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;新建&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot; n&quot;>;num_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;no&quot;>;数组&lt;/span>;&lt;span class =&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;新建&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;num_nodes&lt;/span>;&lt; span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span >; &lt;span class=&quot;c1&quot;>;# 将矩阵的元素设置为1表示betw的边在节点上&lt;/span>; &lt;span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class= &quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt; span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span >;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;= &lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot; >;1&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class= &quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;我们可以使用邻接矩阵来表示图并进行运算在上面。例如，我们可以用它来确定一个节点的度数，也就是连接到它的边的数量。为此，我们可以对节点对应的矩阵的行或列中的元素进行求和。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot; >;&lt;code>;&lt;span class=&quot;c1&quot;>;#求节点0的度数&lt;/span>; &lt;span class=&quot;n&quot;>;degree&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt; span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;].&lt;/ span>;&lt;span class=&quot;nf&quot;>;sum&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;我们还可以使用邻接矩阵来判断两个节点之间是否存在边。如果节点对应的行和列相交处的元素为1，则存在边。如果为0，则没有边。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;c1&quot; >;# 检查节点0和节点1之间是否有边&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p &quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class =&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;节点0和节点1之间有一条边&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;节点0和节点1之间没有边&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt; p>;我们可以使用邻接矩阵对图执行的另一个操作是找到两个节点之间的最短路径。这可以使用 Dijkstra 算法或 Floyd-Warshall 算法等算法来完成。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt; span class=&quot;c1&quot;>;#使用Dijkstra算法找到节点0和节点2之间的最短路径&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;set&#39;&lt; /span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;dijkstra&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;来源&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n &quot;>;target&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;#初始化距离和之前的节点&lt;/span>; &lt;span class=&quot;n&quot;>;distances&lt;/span >; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt; /span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;大小&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;no&quot;>;浮动&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;没有&quot;>;INFIN ITY&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;prev_nodes&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no &quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;新建&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class= &quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;大小&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;kp&quot;>;nil&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;距离&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>; &lt;span class=&quot;n&quot;>;来源&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/ span>; &lt;span class=&quot;c1&quot;>;# 创建一组未访问节点&lt;/span>; &lt;span class=&quot;n&quot;>;unvisited_nodes&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class =&quot;no&quot;>;设置&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;新建&lt;/span>;&lt;span class=&quot;p&quot;>;((&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span>;&lt;span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;。 &lt;/span>;&lt;span class=&quot;nf&quot;>;大小&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to_a&lt;/span>;&lt;span class=&quot;p &quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;#迭代直到没有un访问过的节点&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;o&quot;>;!&lt;/span>;&lt;span class=&quot;n&quot;>;unvisited_nodes&lt;/span>;&lt;span class=&quot; p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;empty?&lt;/span>; &lt;span class=&quot;c1&quot;>;#找到距离最小的节点&lt;/span>; &lt;span class=&quot;n&quot;>;当前节点&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;未访问节点&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf &quot;>;min_by&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;节点&lt;/span>;&lt;span class= &quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;距离&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;节点&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# 如果到达目标节点则中断&lt;/span>; &lt;span class=&quot; k&quot;>;break&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;n&quot;>;target&lt;/span>; &lt;span class=&quot;c1&quot;>;# 从未访问节点集合中移除当前节点&lt;/span>; &lt;span class=&quot;n&quot;>;unvisited_nodes&lt;/span>;&lt;span class =&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;删除&lt;/sp一个&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;#更新邻居的距离&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span >;&lt;span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;大小&lt;/span>;&lt;span class=&quot;p&quot;>;)。 &lt;/span>;&lt;span class=&quot;nf&quot;>;每个&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot; >;neighbor&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;c1&quot;>;#如果当前节点与邻居之间没有边则跳过&lt;/span>; &lt;span class=&quot; k&quot;>;下一个&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class =&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;n&quot;>;邻居&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;c1&quot;>;#计算到邻居的距离&lt;/span>; &lt;span class= &quot;n&quot;>;alt&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;距离&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/spa n>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;+&lt;/span>; &lt;span class=&quot;n&quot;>;矩阵&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;当前节点&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;n &quot;>;neighbor&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Update the distance and previous node if necessary&lt;/span>; &lt;span class=&quot;k&quot;>;if &lt;/span>; &lt;span class=&quot;n&quot;>;alt&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;distances&lt;/span>;&lt;span class=&quot;p &quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;neighbor&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;distances&lt;/span>;&lt;span class= &quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;neighbor&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;alt&lt;/span>; &lt;span class=&quot;n&quot;>;prev_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;neighbor&lt;/span>; &lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/ span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Return the shortest path&lt;/span>; &lt;span class=&quot; n&quot;>;path&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[]&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;target&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;n&quot;>;path&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;unshift&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;prev_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;path&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;shortest_path&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;dijkstra&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Incidence Matrices &lt;/h2>; &lt;p>;In addition to adjacency matrices, another way to represent a graph using a matrix is through an incidence matrix. An incidence matrix is a matrix with a row for each node and a column for each edge, and the elements of the matrix represent whether a node is connected to an edge.&lt;/p>; &lt;p>;Here is an example of how to create an incidence matrix for a simple graph in ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Create an empty matrix with the same number of rows as the number of nodes and the same number of columns as the number of edges&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;num_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;num_edges&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set the elements of the matrix to 1 to represent the connections between the nodes and edges&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;We can use the incidence matrix to perform various operations on th e graph, such as finding the degree of a node or determining the endpoints of an edge.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Find the degree of node 0&lt;/span>; &lt;span class=&quot;n&quot;>;degree&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;].&lt;/span>;&lt;span class=&quot;nf&quot;>;sum&lt;/span>; &lt;span class=&quot;c1&quot;>;# Find the endpoints of edge 1&lt;/span>; &lt;span class=&quot;n&quot;>;endpoints&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span>;&lt;span class=&quot;n&quot;>;num_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;select&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;node&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;node&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; NetworkX &lt;/h2>; &lt;p>;The &lt;a href=&quot;https://github.com/SciRuby/networkx.rb&quot;>;networkx&lt;/a>; library is a powerful tool for working with graphs in ruby. It provides classes for representing graphs, as well as algorithms for analyzing and manipulating them.&lt;/p>; &lt;p>;Here is an example of how to use networkx to create and manipulate a graph:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;networkx&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Create an empty graph&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;NetworkX&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Graph&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;c1&quot;>;# Add nodes to the graph&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_node&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_node&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add _node&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Add edges to the graph&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_edge&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_edge&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_edge&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Find the degree of node 0&lt;/span>; &lt;span class=&quot;n&quot;>;degree&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;degree&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/ span>; &lt;span class=&quot;c1&quot;>;# Find the shortest path between node 0 and node 2&lt;/span>; &lt;span class=&quot;n&quot;>;shortest_path&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;NetworkX&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;shortest_path&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;Matrices are a powerful tool for representing and manipulating graphs in computer algorithms. Whether you use adjacency matrices, incidence matrices, or a library like networkx, there are many ways to work with graphs in ruby. I hope this article has been helpful in understanding some of the basics and giving you some ideas for further exploration.&lt;/p>;</description><category>红宝石</category><category>programming</category></item><item><title> Ruby (love) RSpec</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Mon, 02 Jan 2023 10:41:10 +0000</pubDate><link/> https://dev.to/daviducolo/ruby-rspec-5eo6<guid> https://dev.to/daviducolo/ruby-rspec-5eo6</guid><description> &lt;h2>; Intro &lt;/h2>; &lt;p>;Testing is an essential part of the software development process. It helps ensure that your code is correct, reliable, and maintainable. There are many different approaches to testing, and each has its own benefits and drawbacks.&lt;/p>; &lt;p>;In the Ruby programming language, one of the most popular testing frameworks is &lt;strong>;RSpec&lt;/strong>;. &lt;a href=&quot;https://rspec.info&quot;>;RSpec&lt;/a>; is a flexible and expressive testing tool that allows you to write and run automated tests for your Ruby code.&lt;/p>; &lt;p>;There are many reasons why testing is important, particularly when it comes to Ruby. Here are a few of the key benefits of testing your Ruby code:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Catching Bugs: Testing helps you catch bugs in your code before they become a problem. By running a suite of tests, you can quickly identify any issues and fix them before they cause problems in production.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Ensuring Quality: Testing helps you ensure that your code is of high quality. By writing tests that cover all of the different scenarios and edge cases, you can be confident that your code is working as intended.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Facilitating Maintenance: Tests make it easier to maintain and modify your code over time. If you have a comprehensive suite of tests, you can make changes to your code with confidence, knowing that you have a safety net to catch any issues that might arise.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Documentation: Tests can serve as documentation for your code. By looking at the tests, you can see exactly how the code is intended to behave and what it is supposed to do.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;In short, testing is an important part of the software development process, and RSpec is a powerful tool for testing Ruby code. By writing and running tests, you can ensure that your code is correct, reliable, and maintainable.&lt;/p>; &lt;h2>; What is RSpec? &lt;/h2>; &lt;p>;RSpec is a testing tool for the Ruby language that allows you to write and run automated tests for your code. It is designed to be expressive and easy to use, making it a popular choice for testing Ruby applications.&lt;/p>; &lt;p>;RSpec tests are written in Ruby and are typically stored in files with a .rb extension. These files contain test cases, which are sets of expectations about the behavior of your code. When you run your tests, RSpec will execute each test case and report whether the code behaved as expected.&lt;/p>; &lt;h2>; Getting Started with RSpec &lt;/h2>; &lt;p>;To use RSpec, you will need to have Ruby installed on your machine. You can then install RSpec by running the following command:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;gem install rspec &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will install the RSpec gem, which includes all of the necessary files and libraries for running RSpec tests.&lt;/p>; &lt;p>;Once RSpec is installed, you can create a new test file by creating a new file with a .rb extension and adding the following code at the top of the file:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;require &#39;rspec&#39; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This line will include the RSpec library in your test file, allowing you to use all of the RSpec functions and syntax.&lt;/p>; &lt;h2>; Basic RSpec Syntax &lt;/h2>; &lt;p>;RSpec tests are organized into test suites, which are defined using the describe block. Within the describe block, you can define individual test cases using the it block.&lt;/p>; &lt;p>;Here is an example of a simple RSpec test suite:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;describe&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;MyTestSuite&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;does something&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# test code goes here&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Within the it block, you can use various RSpec methods to define your expectations about the behavior of your code. For example, you can use the expect method to specify what you expect the result of a certain operation to be.&lt;/p>; &lt;p>;Here is an example of an RSpec test case that uses the expect method:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;adds two numbers&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;add&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;eq&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;5&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, we are calling the add method with the arguments 2 and 3, and expecting the result to be 5. If the add method returns 5 as expected, then the test will pass. If the add method returns any other value, the test will fail.&lt;/p>; &lt;h2>; Common RSpec Matchers &lt;/h2>; &lt;p>;Here is a list of some common RSpec matchers that you can use to define your expectations in your test cases:&lt;/p>; &lt;ul>; &lt;li>; &lt;strong>;eq&lt;/strong>;: This matcher checks if the actual value is equal to the expected value.&lt;/li>; &lt;li>; &lt;strong>;be&lt;/strong>;: This matcher checks if the actual value is the same object as the expected value.&lt;/li>; &lt;li>; &lt;strong>;include&lt;/strong>;: This matcher checks if the actual value is an array or string that includes the expected value.&lt;/li>; &lt;li>; &lt;strong>;raise_error&lt;/strong>;: This matcher checks if the actual value is a block of code that raises an error.&lt;/li>; &lt;li>; &lt;strong>;be_a&lt;/strong>;: This matcher checks if the actual value is an instance of the expected class.&lt;/li>; &lt;li>; &lt;strong>;be_between&lt;/strong>;: This matcher checks if the actual value is a number that is between the two expected values.&lt;/li>; &lt;li>; &lt;strong>;have_key&lt;/strong>;: This matcher checks if the actual value is a hash that has the expected key. &lt;/li>; &lt;/ul>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;creates a user&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;name: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;John&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;age: &lt;/span>;&lt;span class=&quot;mi&quot;>;30&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;be_a&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;eq&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;John&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;age&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;be_between&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;20&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;40&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;inclusive&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;attributes&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;have_key&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;:name&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, we are creating a new User object and using the be_a matcher to check if it is an instance of the User class. We are also using the eq matcher to check if the name attribute is set to &quot;John&quot;, and the be_between matcher to check if the age attribute is between 20 and 40. Finally, we are using the have_key matcher to check if the attributes hash has a :name key.&lt;/p>; &lt;h2>; RSpec Before and After Hooks &lt;/h2>; &lt;p>;RSpec allows you to define &quot;&lt;strong>;before&lt;/strong>;&quot; and &quot;&lt;strong>;after&lt;/strong>;&quot; hooks that will be run before and after each test case. These hooks can be used to set up and clean up any resources or data that are needed for your tests.&lt;/p>; &lt;p>;Here is an example of how you might use the before and after hooks:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;describe&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;MyTestSuite&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;before&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to run before each test case&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;after&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to run after each test case&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;does something&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# test code goes here&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the code in the before block will be run before each test case in the MyTestSuite suite, and the code in the after block will be run after each test case.&lt;/p>; &lt;h2>; Running RSpec Tests &lt;/h2>; &lt;p>;To run your RSpec tests, you can use the rspec command followed by the path to your test file. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;rspec spec/my_test_file.rb &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will execute all of the test cases in the my_test_file.rb file and print the results to the console.&lt;/p>; &lt;p>;You can also run all of the test files in a certain directory by specifying the path to the directory instead of a specific file. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;rspec spec/ &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will run all of the test files in the &lt;strong>;spec&lt;/strong>; directory and its subdirectories.&lt;/p>; &lt;h2>; RSpec with Ruby on Rails &lt;/h2>; &lt;p>;RSpec can also be used for testing Ruby on Rails applications. In a Rails application, you can use RSpec to write tests for your models, controllers, views, and other components of your application.&lt;/p>; &lt;p>;To use RSpec with Rails, you will need to add the &lt;strong>;rspec-rails&lt;/strong>; gem to your Gemfile and run the rails generate rspec:install command. This will create a new spec directory in your Rails project and generate the necessary configuration files for RSpec.&lt;/p>; &lt;p>;To write a test in RSpec for a Rails application, you can create a new file in the spec directory with a &lt;strong>;_spec.rb&lt;/strong>; suffix. For example, to write a test for a User model, you might create a file called spec/models/user_spec.rb.&lt;/p>; &lt;p>;Here is an example of an RSpec test for a Rails model:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;rails_helper&#39;&lt;/span>; &lt;span class=&quot;no&quot;>;RSpec&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;describe&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;type: :model&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;has a valid factory&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;build&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;:user&lt;/span>;&lt;span class=&quot;p&quot;>;)).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;be_valid&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, we are using the build method from the FactoryBot library to create a new User object, and then using the be_valid matcher to check if the object is valid according to the model&#39;s validation rules.&lt;/p>; &lt;p>;To run your RSpec tests in a Rails application, you can use the rspec command followed by the path to your test files or directories. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;rspec spec/models &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will run all of the test files in the spec/models directory and its subdirectories.&lt;/p>; &lt;p>;Overall, RSpec is a powerful and flexible testing tool that is well-suited for testing Ruby on Rails applications. By writing and running tests with RSpec, you can ensure that your Rails application is correct, reliable, and maintainable.&lt;/p>; &lt;h2>; Advanced RSpec techniques &lt;/h2>; &lt;p>;Here are some advanced techniques you can use when writing tests with RSpec:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;&lt;strong>;Shared Examples&lt;/strong>;: You can use shared examples to DRY up your test suite. Shared examples allow you to define a set of tests that can be reused in multiple contexts. This is useful when you have similar tests that need to be run for different models or classes.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Custom Matchers&lt;/strong>;: RSpec comes with a number of built-in matchers, but you can also define your own custom matchers to make your tests more expressive. Custom matchers allow you to define your own methods for comparing the expected and actual results of a test.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Mocks and Stubs&lt;/strong>;: Mocks and stubs are test doubles that allow you to control the behavior of an object in a test. You can use them to test how your code interacts with external dependencies, such as a database or a web API.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Testing Private Methods&lt;/strong>;: RSpec has a number of methods and techniques you can use to test private methods in your code. These include using the send method to call private methods, or using the instance_eval method to execute code in the context of an object&#39;s private methods.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In conclusion, RSpec matchers are an important part of the RSpec testing framework. They allow you to define your expectations about the behavior of your code and determine whether those expectations are met. There are a variety of matchers available in RSpec, ranging from simple equality checks to more complex checks for class membership or the presence of certain keys in a hash. By using these matchers effectively, you can write comprehensive and reliable tests for your Ruby code.&lt;/p>;</description><category>红宝石</category><category>铁轨</category><category>testing</category><category>教程</category></item><item><title>How to Mitigate the Impact of a DDoS Attack: Strategies and Examples</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Fri, 30 Dec 2022 10:26:39 +0000</pubDate><link/> https://dev.to/sevio/how-to-mitigate-the-impact-of-a-ddos-attack-strategies-and-examples-30cd<guid> https://dev.to/sevio/how-to-mitigate-the-impact-of-a-ddos-attack-strategies-and-examples-30cd</guid><description> &lt;h2>; Intro &lt;/h2>; &lt;p>;A Distributed Denial of Service (DDoS) attack is a type of cyber attack in which a large number of compromised computers, known as a botnet, are used to flood a targeted website or network with traffic in an attempt to overwhelm it and make it unavailable to legitimate users.&lt;/p>; &lt;p>;DDoS attacks can be very disruptive and costly, as they can prevent businesses from providing their services to customers and cause lost revenue. They can also be difficult to defend against, as they often involve a large number of sources generating traffic.&lt;/p>; &lt;p>;There are several strategies that can be used to mitigate the impact of a DDoS attack. Some of these strategies include:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Rate limiting: This involves limiting the number of requests that a server will accept from a single source within a certain time period. This can help to prevent an attacker from overwhelming the server with a large number of requests.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Blacklisting: This involves identifying and blocking &lt;br>; traffic from known malicious sources. This can be done using IP address blacklisting or by analyzing traffic patterns to identify suspicious activity.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Traffic shaping: This involves prioritizing certain types of traffic over others, based on their importance or the likelihood that they are part of a DDoS attack. For example, traffic from legitimate users might be given higher priority than traffic from unknown sources.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Load balancing: This involves distributing incoming traffic across multiple servers, rather than relying on a single server to handle all requests. This can help to reduce the impact of a DDoS attack, as the attacker would need to generate a much larger amount of traffic to overwhelm all of the servers.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Cloud-based DDoS protection: This involves using a cloud-based service to absorb and filter out malicious traffic before it reaches the targeted website or network. This can be an effective way to defend against DDoS attacks, as the cloud provider typically has a much larger capacity to absorb traffic than a single website or network.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;Here is an example of how you might use rate limiting to mitigate the impact of a DDoS attack in Ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set the maximum number of requests allowed per minute&lt;/span>; &lt;span class=&quot;no&quot;>;MAX_REQUESTS_PER_MINUTE&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1000&lt;/span>; &lt;span class=&quot;n&quot;>;before&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# Get the current time&lt;/span>; &lt;span class=&quot;n&quot;>;now&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Time&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;now&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;to_i&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check if the client has made more than the maximum allowed number of requests in the past minute&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;nil?&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the IP address is not available, allow the request to proceed&lt;/span>; &lt;span class=&quot;k&quot;>;return&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;vg&quot;>;$redis&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to_i&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;no&quot;>;MAX_REQUESTS_PER_MINUTE&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the client has exceeded the maximum allowed number of requests, return a 429 Too Many Requests error&lt;/span>; &lt;span class=&quot;n&quot;>;halt&lt;/span>; &lt;span class=&quot;mi&quot;>;429&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Too Many Requests&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Increment the request counter for the client&lt;/span>; &lt;span class=&quot;vg&quot;>;$redis&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;incr&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;vg&quot;>;$redis&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;expire&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;60&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;now&lt;/span>; &lt;span class=&quot;o&quot;>;%&lt;/span>; &lt;span class=&quot;mi&quot;>;60&lt;/span>;&lt;span class=&quot;p&quot;>;))&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Your application code goes here...&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This code uses the before hook in Sinatra to rate limit incoming requests. It checks the number of requests that have been made by the client in the past minute, and if the client has exceeded the maximum allowed number of requests, it returns a 429 Too Many Requests error.&lt;/p>; &lt;p>;By implementing strategies like these, you can help to mitigate the impact of a DDoS attack and protect your website or network from being overwhelmed by malicious traffic.&lt;/p>; &lt;p>;There are several other strategies that can be used to mitigate the impact of a DDoS attack. Here are a few additional strategies that you might consider:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Use a web application firewall (WAF): A WAF is a security solution that sits between your website or application and the internet, and analyzes incoming traffic to detect and block malicious activity. WAFs can be configured to block traffic based on various criteria, such as IP addresses, traffic patterns, or types of attacks.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Use content delivery networks (CDNs): CDNs are networks of servers that are distributed around the world, and are used to deliver web content to users based on their geographic location. By using a CDN, you can offload some of the traffic that would normally be directed to your server, which can help to reduce the impact of a DDoS attack.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Implement security protocols: There are various security protocols that can be used to help protect against DDoS attacks, such as Transport Layer Security (TLS) and Secure Sockets Layer (SSL). By using these protocols, you can encrypt your traffic and make it more difficult for attackers to intercept and manipulate it.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Monitor your network: It is important to regularly monitor your network for signs of a DDoS attack, such as an unusual increase in traffic or a decrease in performance. By identifying an attack early, you can take action to mitigate the impact and prevent it from causing significant disruption.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;Here is an example of how you might use a CDN to mitigate the impact of a DDoS attack in Ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;rack/contrib/try_static&#39;&lt;/span>; &lt;span class=&quot;n&quot;>;use&lt;/span>; &lt;span class=&quot;no&quot;>;Rack&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;TryStatic&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;root: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;public&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;urls: &lt;/span>;&lt;span class=&quot;sx&quot;>;%w[/]&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;try: &lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;.html&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;index.html&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;/index.html&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Your application code goes here...&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This code uses the Rack::TryStatic middleware to serve static content from the public directory. If a request is made for a static file that exists in the public directory (eg an HTML, CSS, or JavaScript file), the middleware will serve the file directly, rather than routing the request to your application. This can help to reduce the load on your application and mitigate the impact of a DDoS attack.&lt;/p>; &lt;p>;By implementing strategies like these, you can help to protect your website or network from DDoS attacks and ensure that it remains available to legitimate users.&lt;/p>; &lt;p>;Here are a few additional examples of how you might use different strategies to mitigate the impact of a DDoS attack:&lt;/p>; &lt;h2>; Blacklisting &lt;/h2>; &lt;p>;You can use blacklisting to block traffic from known malicious sources. For example, you might use the ipban gem in Ruby to block traffic from IP addresses that have been flagged as malicious:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;ipban&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set the maximum number of failed login attempts allowed from a single IP address&lt;/span>; &lt;span class=&quot;no&quot;>;MAX_FAILED_LOGIN_ATTEMPTS&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;5&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;/login&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check if the IP address has exceeded the maximum allowed number of failed login attempts&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;vg&quot;>;$redis&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to_i&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;no&quot;>;MAX_FAILED_LOGIN_ATTEMPTS&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the IP address has exceeded the maximum allowed number of failed login attempts, block the IP address&lt;/span>; &lt;span class=&quot;no&quot;>;Ipban&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;block&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;halt&lt;/span>; &lt;span class=&quot;mi&quot;>;403&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Access Denied&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Attempt to log in&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the login fails, increment the failed login counter for the IP address&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the login succeeds, reset the failed login counter for the IP address&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the Ipban.block method is used to block traffic from an IP address that has exceeded the maximum allowed number of failed login attempts. This can help to prevent an attacker from repeatedly attempting to guess a user&#39;s login credentials.&lt;/p>; &lt;h2>; Traffic shaping &lt;/h2>; &lt;p>;You can use traffic shaping to prioritize certain types of traffic over others. For example, you might use the sinatra-priority gem in Ruby to give higher priority to traffic from authenticated users:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra/priority&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set the priority levels for different types of traffic&lt;/span>; &lt;span class=&quot;n&quot;>;priority&lt;/span>; &lt;span class=&quot;ss&quot;>;:high&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;authenticated?&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;priority&lt;/span>; &lt;span class=&quot;ss&quot;>;:low&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;o&quot;>;!&lt;/span>;&lt;span class=&quot;n&quot;>;authenticated?&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;get&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;/&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# This route will be given high priority if the user is authenticated, and low priority if the user is not authenticated&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Welcome to the website!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the authenticated? method is used to determine the priority level for incoming traffic. Traffic from authenticated users will be given high priority, while traffic from non-authenticated users will be given low priority. This can help to ensure that traffic from legitimate users is processed more quickly, even in the event of a DDoS attack.&lt;/p>; &lt;h2>; Load balancing &lt;/h2>; &lt;p>;You can use load balancing to distribute incoming traffic across multiple servers, rather than relying on a single server to handle all requests. For example, you might use the sinatra-contrib gem in Ruby to enable load balancing with the Rack::LoadBalancer middleware:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra/contrib&#39;&lt;/span>; &lt;span class=&quot;n&quot;>;use&lt;/span>; &lt;span class=&quot;no&quot;>;Rack&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;LoadBalancer&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;balancers: &lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;name: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;app1&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;host: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;127.0.0.1&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;port: &lt;/span>;&lt;span class=&quot;mi&quot;>;4567&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;weight: &lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;p&quot;>;},&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;name: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;app2&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;host: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;127.0.0.1&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;port: &lt;/span>;&lt;span class=&quot;mi&quot;>;4568&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;weight: &lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# Your application code goes here...&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the Rack::LoadBalancer middleware is used to distribute incoming traffic between two servers (app1 and app2). The weight attribute of each server determines the proportion of traffic that will be directed to each server. For example, if both servers have a weight of 1, incoming traffic will be evenly distributed between them.&lt;/p>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In conclusion, a Distributed Denial of Service (DDoS) attack is a type of cyber attack that involves flooding a targeted website or network with traffic in an attempt to overwhelm it and make it unavailable to legitimate users. DDoS attacks can be very disruptive and costly, and they can be difficult to defend against due to the large number of sources generating traffic.&lt;/p>; &lt;p>;There are several strategies that can be used to mitigate the impact of a DDoS attack, including rate limiting, blacklisting, traffic shaping, load balancing, and using a cloud-based DDoS protection service. It is also important to consider using a web application firewall (WAF), content delivery networks (CDNs), security protocols, and monitoring your network to detect and respond to DDoS attacks.&lt;/p>; &lt;p>;By implementing these strategies and keeping your website or network up to date with the latest security measures, you can help to protect your business from DDoS attacks and ensure that your services remain available to your customers.&lt;/p>;</description><category>红宝石</category><category>devops</category></item><item><title> Performance of Exception Handling in Ruby</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Wed, 28 Dec 2022 15:56:39 +0000</pubDate><link/> https://dev.to/daviducolo/performance-of-exception-handling-in-ruby-44ic<guid> https://dev.to/daviducolo/performance-of-exception-handling-in-ruby-44ic</guid><description> &lt;h2>; Intro &lt;/h2>; &lt;p>;One of Ruby&#39;s key features is its exception handling mechanism, which allows developers to handle errors and exceptions in a clean and organized manner. However, using exceptions for error handling can have a negative impact on the performance of a Ruby application, especially if they are used excessively or inappropriately. In this article, we will examine the performance implications of using exceptions in Ruby and discuss some best practices for minimizing their impact on your application&#39;s performance.&lt;/p>; &lt;h2>; How exceptions work in Ruby &lt;/h2>; &lt;p>;In Ruby, exceptions are objects that represent an error or exceptional condition that occurs during the execution of a program. When an exception is raised, it is propagated up the call stack until it is caught and handled by an appropriate exception handler. If no exception handler is found, the program will terminate with an unhandled exception error.&lt;/p>; &lt;p>;Exceptions are raised using the raise keyword, which takes an optional message argument and an optional exception class argument. For example, the following code raises a &lt;strong>;RuntimeError&lt;/strong>; with the message &quot;Something went wrong&quot;:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Something went wrong&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;You can also raise a specific exception class, such as ArgumentError:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ArgumentError&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Invalid argument&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;To handle exceptions, you can use the begin-rescue-end block, which allows you to specify a block of code that may raise an exception and a block of code that will handle the exception if it is raised. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;begin&lt;/span>; &lt;span class=&quot;c1&quot;>;# code that may raise an exception&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to handle the exception&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;You can also specify a specific exception class or multiple exception classes to rescue:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;begin&lt;/span>; &lt;span class=&quot;c1&quot;>;# code that may raise an exception&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;no&quot;>;StandardError&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to handle StandardError and its subclasses&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;no&quot;>;ArgumentError&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to handle ArgumentError and its subclasses&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Finally, you can use the ensure keyword to specify a block of code that will always be executed, regardless of whether an exception is raised or not:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;begin&lt;/span>; &lt;span class=&quot;c1&quot;>;# code that may raise an exception&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to handle the exception&lt;/span>; &lt;span class=&quot;k&quot;>;ensure&lt;/span>; &lt;span class=&quot;c1&quot;>;# code that will always be executed&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Performance implications of exceptions &lt;/h2>; &lt;p>;Using exceptions for error handling can have a significant impact on the performance of a Ruby application, especially if they are used excessively or inappropriately. This is because raising and handling exceptions involves a significant amount of overhead, including creating and manipulating exception objects, unwinding the call stack, and executing exception handling code.&lt;/p>; &lt;p>;Here are some ways in which the use of exceptions can affect the performance of a Ruby application:&lt;/p>; &lt;ul>; &lt;li>;&lt;p>;&lt;strong>;Object creation overhead&lt;/strong>;: Every time an exception is raised, a new exception object is created and initialized with the appropriate message and exception class. This involves allocating memory and initializing the object, which can be expensive, especially if the exception is raised frequently.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Unwinding the call stack&lt;/strong>;: When an exception is raised, the interpreter must unwind the call stack to find the appropriate exception handler. This involves traversing the call stack and checking each frame for an exception handler, which can be time-consuming and add significant overhead to the program.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Exception handling code&lt;/strong>;: The code in the rescue block is executed every time an exception is raised and handled, which can add additional overhead to the program. If the exception handling code is complex or performs a lot of computations, it can further degrade the performance of the application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Increased memory usage&lt;/strong>;: Exceptions use more memory than traditional error handling mechanisms, such as returning error codes or using nil values to indicate an error. This is because exception objects are created and stored on the call stack, which can lead to increased memory usage and slower garbage collection.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Slower code execution&lt;/strong>;: The overhead associated with raising and handling exceptions can slow down the overall execution of the program. This is especially noticeable in tight loops or in code that is called frequently.&lt;/p>;&lt;/li>; &lt;/ul>; &lt;p>;To minimize the performance impact of exceptions in your Ruby application, it is important to use them appropriately and only when necessary. Here are some best practices for using exceptions in Ruby:&lt;/p>; &lt;ul>; &lt;li>;&lt;p>;&lt;strong>;Use exceptions for exceptional situations&lt;/strong>;: Exceptions should be used to handle truly exceptional situations, such as unexpected input, system failures, or other conditions that cannot be handled in a normal way. Do not use exceptions for control flow or as a substitute for traditional error handling mechanisms.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Avoid raising and handling exceptions in tight loops&lt;/strong>;: Avoid raising and handling exceptions in tight loops or in code that is called frequently. This can significantly degrade the performance of the application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Use specific exception classes&lt;/strong>;: Use specific exception classes, rather than the generic StandardError class, to clearly communicate the nature of the error and make it easier to handle.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Avoid rescuing Exception&lt;/strong>;: Do not rescue the Exception class, as this will catch all exceptions, including those that should not be handled, such as Interrupt and SystemExit. Instead, rescue specific exception classes or use a more general class, such as StandardError, which does not catch system-level exceptions.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Consider using other error handling mechanisms&lt;/strong>;: In some cases, it may be more appropriate to use other error handling mechanisms, such as returning error codes or using nil values to indicate an error. This can be more efficient than using exceptions, especially in cases where the error handling code is called frequently or the overhead of raising and handling exceptions is significant.&lt;/p>;&lt;/li>; &lt;/ul>; &lt;h2>; Benchmark &lt;/h2>; &lt;p>;Here is a simple benchmark example that compares the performance of using exceptions versus traditional error handling mechanisms in Ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;benchmark&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Traditional error handling using return codes&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;divide_using_return_codes&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;return&lt;/span>; &lt;span class=&quot;kp&quot;>;nil&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;o&quot;>;/&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Exception-based error handling&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;divide_using_exceptions&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ZeroDivisionError&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;o&quot;>;/&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;no&quot;>;ZeroDivisionError&lt;/span>; &lt;span class=&quot;kp&quot;>;nil&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Benchmark the two methods&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1_000_000&lt;/span>; &lt;span class=&quot;no&quot;>;Benchmark&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bm&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;bm&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;bm&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;report&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;return codes&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;times&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;divide_using_return_codes&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;bm&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;report&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;exceptions&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;times&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;divide_using_exceptions&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight shell&quot;>;&lt;code>; user system total real &lt;span class=&quot;k&quot;>;return &lt;/span>;codes 0.044149 0.000053 0.044202 &lt;span class=&quot;o&quot;>;(&lt;/span>; 0.044223&lt;span class=&quot;o&quot;>;)&lt;/span>; exceptions 0.508261 0.011618 0.519879 &lt;span class=&quot;o&quot;>;(&lt;/span>; 0.520129&lt;span class=&quot;o&quot;>;)&lt;/span>; &lt;span class=&quot;o&quot;>;=&amp;gt;&lt;/span>; &lt;span class=&quot;o&quot;>;[&lt;/span>;&lt;span class=&quot;c&quot;>;#&amp;lt;Benchmark::Tms:0x000000014106b598&lt;/span>; @cstime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.0, @cutime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.0, @label&lt;span class=&quot;o&quot;>;=&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;return codes&quot;&lt;/span>;, @real&lt;span class=&quot;o&quot;>;=&lt;/span>;0.04422300006262958, @stime&lt;span class=&quot;o&quot;>;=&lt;/span>;5.2999999999997494e-05, @total&lt;span class=&quot;o&quot;>;=&lt;/span>;0.04420199999999999, @utime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.044148999999999994&amp;gt;, &lt;span class=&quot;c&quot;>;#&amp;lt;Benchmark::Tms:0x000000015486d8f0&lt;/span>; @cstime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.0, @cutime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.0, @label&lt;span class=&quot;o&quot;>;=&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;exceptions&quot;&lt;/span>;, @real&lt;span class=&quot;o&quot;>;=&lt;/span>;0.5201290000695735, @stime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.011618000000000003, @total&lt;span class=&quot;o&quot;>;=&lt;/span>;0.5198790000000001, @utime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.5082610000000001&amp;gt;] &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;&lt;em>;Apple Mac Book Pro 13-inch, M1, 2020 16GB RAM&lt;/em>;&lt;/p>; &lt;p>;The output of the benchmark will show the elapsed time for each method, allowing you to compare the performance of the two approaches. You can also modify the benchmark to test different scenarios, such as handling different types of errors or handling errors in tight loops.&lt;/p>; &lt;p>;Keep in mind that the performance implications of using exceptions will vary depending on the specific use case and the complexity of the error handling code. It is always a good idea to benchmark and profile your code to determine the most appropriate error handling mechanism for your specific needs.&lt;/p>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;Exceptions are a powerful and useful tool for handling errors and exceptional situations in Ruby. However, it is important to use them appropriately to avoid degrading the performance of your application. By following best practices and using exceptions only when necessary, you can ensure that your application runs smoothly and efficiently.&lt;/p>;</description><category>红宝石</category><category>表现</category><category>programming</category></item><item><title> Stock prediction algorithm in Python</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Wed, 28 Dec 2022 09:05:24 +0000</pubDate><link/> https://dev.to/daviducolo/stock-prediction-algorithm-in-python-3cmb<guid> https://dev.to/daviducolo/stock-prediction-algorithm-in-python-3cmb</guid><description> &lt;p>;To create a stock prediction algorithm in Python, you will need to follow these steps:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Collect historical data for the stock you want to predict. You can use a financial API or web scraping to get this data. Make sure to get data for multiple years, as it will be used to train the prediction model.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Preprocess the data by cleaning and organizing it. This may include removing missing values, handling outliers, and converting the data into a format that is suitable for modeling.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Split the data into training and testing sets. The training set will be used to train the prediction model, while the testing set will be used to evaluate the model&#39;s performance.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Choose a prediction model and train it on the training data. There are many different models you can use for stock prediction, such as linear regression, decision trees, and support vector machines.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Test the model on the testing data and evaluate its performance. You can use metrics such as mean absolute error (MAE) and root mean squared error (RMSE) to measure the model&#39;s accuracy.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Fine-tune the model by adjusting its hyperparameters and/or using different model architectures.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Use the trained model to make predictions on unseen data, such as future stock prices.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;It&#39;s worth noting that stock prediction is a challenging task, and it&#39;s difficult to achieve high accuracy. There are many factors that can influence stock prices, and it&#39;s hard to account for all of them in a predictive model. As such, it&#39;s important to be cautious when interpreting the results of your predictions.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight python&quot;>;&lt;code>;&lt;span class=&quot;kn&quot;>;import&lt;/span>; &lt;span class=&quot;nn&quot;>;pandas&lt;/span>; &lt;span class=&quot;k&quot;>;as&lt;/span>; &lt;span class=&quot;n&quot;>;pd&lt;/span>; &lt;span class=&quot;kn&quot;>;import&lt;/span>; &lt;span class=&quot;nn&quot;>;numpy&lt;/span>; &lt;span class=&quot;k&quot;>;as&lt;/span>; &lt;span class=&quot;n&quot;>;np&lt;/span>; &lt;span class=&quot;c1&quot;>;# Load the data &lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;pd&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;read_csv&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;stock_data.csv&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Preprocess the data &lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;dropna&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;inplace&lt;/span>;&lt;span class=&quot;o&quot;>;=&lt;/span>;&lt;span class=&quot;bp&quot;>;True&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Remove rows with missing values &lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Close&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Remove rows with invalid close price &lt;/span>; &lt;span class=&quot;c1&quot;>;# Split the data into training and testing sets &lt;/span>;&lt;span class=&quot;n&quot;>;train_data&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Date&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;2020-01-01&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;test_data&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Date&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;=&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;2020-01-01&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Choose a prediction model &lt;/span>;&lt;span class=&quot;n&quot;>;model&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;LinearRegression&lt;/span>;&lt;span class=&quot;p&quot;>;()&lt;/span>; &lt;span class=&quot;c1&quot;>;# Train the model on the training data &lt;/span>;&lt;span class=&quot;n&quot;>;X_train&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;train_data&lt;/span>;&lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Open&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;High&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;Low&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;Volume&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;n&quot;>;y_train&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;train_data&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Close&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;fit&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;X_train&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;y_train&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Test the model on the testing data &lt;/span>;&lt;span class=&quot;n&quot;>;X_test&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;test_data&lt;/span>;&lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Open&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;High&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;Low&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;Volume&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;n&quot;>;y_test&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;test_data&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Close&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;predictions&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;predict&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;X_test&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Evaluate the model&#39;s performance &lt;/span>;&lt;span class=&quot;n&quot;>;mae&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;mean_absolute_error&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;y_test&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;predictions&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;rmse&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;np&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;sqrt&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;mean_squared_error&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;y_test&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;predictions&lt;/span>;&lt;span class=&quot;p&quot;>;))&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;MAE: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;mae&lt;/span>;&lt;span class=&quot;si&quot;>;:&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;n&quot;>;f&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;RMSE: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;rmse&lt;/span>;&lt;span class=&quot;si&quot;>;:&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;n&quot;>;f&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Fine-tune the model (optional) # ... &lt;/span>; &lt;span class=&quot;c1&quot;>;# Make predictions on unseen data # ... &lt;/span>;&lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This code assumes that you have a stock_data.csv file that contains the historical stock data, and that the data includes columns for the open price, high price, low price, volume, and close price. The code preprocesses the data by removing missing values and rows with invalid close prices, and then splits the data into training and testing sets. The code then trains a linear regression model on the training data, tests the model on the testing data, and evaluates the model&#39;s performance using the mean absolute error (MAE) and root mean squared error (RMSE). Finally, the code shows how you could fine-tune the model (optional) and make predictions on unseen data.&lt;/p>; &lt;p>;Here is an example of what the stock_data.csv file could look like:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;Date,Open,High,Low,Close,Volume 2020-01-02,148.25,150.62,146.87,150.06,20768456 2020-01-03,150.01,151.44,149.56,150.47,19819854 2020-01-06,150.72,152.43,149.57,151.5,23793456 2020-01-07,151.5,152.44,150.49,151.74,26989857 2020-01-08,151.7,152.92,150.9,152.09,22369456 2020-01-09,152.31,153.72,152.01,153.61,23445678 ... &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This file contains daily stock data for a single company, with one row per day. The columns are:&lt;/p>; &lt;p>;&lt;strong>;Date&lt;/strong>;: the date of the stock data&lt;br>; &lt;strong>;Open&lt;/strong>;: the open price of the stock on that day&lt;br>; &lt;strong>;High&lt;/strong>;: the highest price of the stock on that day&lt;br>; &lt;strong>;Low&lt;/strong>;: the lowest price of the stock on that day&lt;br>; &lt;strong>;Close&lt;/strong>;: the close price of the stock on that day&lt;br>; &lt;strong>;Volume&lt;/strong>;: the number of shares traded on that day&lt;/p>; &lt;p>;You may also have additional columns, depending on the data you have available and the needs of your prediction model.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight python&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Test the model on a single example &lt;/span>;&lt;span class=&quot;n&quot;>;example_input&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;np&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;([&lt;/span>;&lt;span class=&quot;mf&quot;>;150.01&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;151.44&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;149.56&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;19819854&lt;/span>;&lt;span class=&quot;p&quot;>;]).&lt;/span>;&lt;span class=&quot;n&quot;>;reshape&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;prediction&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;predict&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;example_input&lt;/span>;&lt;span class=&quot;p&quot;>;)[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Prediction for input &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;example_input&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;prediction&lt;/span>;&lt;span class=&quot;si&quot;>;:&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;n&quot;>;f&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Test the model on multiple examples &lt;/span>;&lt;span class=&quot;n&quot;>;test_inputs&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;np&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;([&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mf&quot;>;148.25&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;150.62&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;146.87&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;20768456&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mf&quot;>;152.31&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;153.72&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;152.01&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;23445678&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mf&quot;>;149.06&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;149.40&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;148.46&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;15423456&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;p&quot;>;])&lt;/span>; &lt;span class=&quot;n&quot;>;predictions&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;predict&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;test_inputs&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Predictions for inputs &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;test_inputs&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;predictions&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Test the model on the entire testing set &lt;/span>;&lt;span class=&quot;n&quot;>;predictions&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;predict&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;X_test&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Predictions for entire test set: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;predictions&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This code shows how you can test your model on a single example, multiple examples, and the entire testing set. For each test, the code prints the predictions made by the model. You can then compare the predictions to the actual stock prices to see how well the model is performing.&lt;/p>;</description><category> python</category><category> machinelearning</category><category>教程</category></item><item><title>Geocoding with Ruby</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Thu, 22 Dec 2022 16:17:50 +0000</pubDate><link/> https://dev.to/daviducolo/geocoding-with-ruby-4229<guid> https://dev.to/daviducolo/geocoding-with-ruby-4229</guid><description> &lt;p>;Geocoding is the process of converting addresses or place names into geographical coordinates, such as latitude and longitude. These coordinates can then be used to place markers on a map, or to perform other spatial operations.&lt;/p>; &lt;p>;In this article, we will explore how to perform geocoding using the Ruby programming language. We will cover several different approaches, including using the geocoder gem, the Google Maps API, and the Mapbox API.&lt;/p>; &lt;h2>; Using the geocoder gem &lt;/h2>; &lt;p>;The geocoder gem is a popular Ruby gem that provides a simple interface for geocoding and reverse geocoding (converting coordinates to addresses). It supports a variety of geocoding providers, including Google Maps, Bing Maps, and OpenStreetMap.&lt;/p>; &lt;p>;To use the geocoder gem, you will need to install it first. Open a terminal and enter the following command:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;gem&lt;/span>; &lt;span class=&quot;n&quot;>;install&lt;/span>; &lt;span class=&quot;n&quot;>;geocoder&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Once the gem is installed, you can use it in your Ruby code by requiring it and creating a new instance of the Geocoder class. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;geocoder&#39;&lt;/span>; &lt;span class=&quot;n&quot;>;geocoder&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Geocoder&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;To perform a geocoding query, you can call the geocode method on the geocoder object, passing in the address or place name that you want to geocode. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;geocoder&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;geocode&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;1600 Amphitheatre Parkway, Mountain View, CA&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;success?&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Latitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;latitude&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Longitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;longitude&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;message&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will output the latitude and longitude of the specified address. If the geocoding query fails, it will output an error message.&lt;/p>; &lt;p>;You can also use the &lt;strong>;reverse_geocode&lt;/strong>; method to convert coordinates to an address. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;geocoder&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;reverse_geocode&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mf&quot;>;37.423021&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>;&lt;span class=&quot;mf&quot;>;122.083739&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;success?&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Address: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;address&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Reverse geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;message&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Using the Google Maps API &lt;/h2>; &lt;p>;Another option for geocoding with Ruby is to use the Google Maps API. This requires creating a Google Maps API key and making HTTP requests to the API&#39;s geocoding endpoint.&lt;/p>; &lt;p>;To get started, you will need to sign up for a Google Cloud account and enable the Google Maps API. You can then create an API key in the Google Cloud Console.&lt;/p>; &lt;p>;Once you have an API key, you can use it to make geocoding requests in Ruby using the Net::HTTP class. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;net/http&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;uri&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Replace YOUR_API_KEY with your actual API key&lt;/span>; &lt;span class=&quot;n&quot;>;api_key&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;YOUR_API_KEY&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set up the URL for the geocoding request&lt;/span>; &lt;span class=&quot;n&quot;>;url&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;URI&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&amp;amp;key=&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;api_key&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Make the request and parse the response&lt;/span>; &lt;span class=&quot;n&quot;>;response&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Net&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;HTTP&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;url&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;JSON&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;parse&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;response&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;To parse the response and extract the latitude and longitude, you can use the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Check the status code to make sure the request was successful&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;status&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;OK&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Extract the latitude and longitude from the first result&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;results&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;lat&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;geometry&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;location&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;lat&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;lng&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;geometry&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;location&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;lng&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Latitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;lat&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Longitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;lng&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;status&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;You can also perform reverse geocoding using the Google Maps API by making a request to the reverseGeocode endpoint and passing in the latitude and longitude coordinates. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Set up the URL for the reverse geocoding request&lt;/span>; &lt;span class=&quot;n&quot;>;url&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;URI&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;https://maps.googleapis.com/maps/api/geocode/json?latlng=37.423021,-122.083739&amp;amp;key=&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;api_key&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Make the request and parse the response&lt;/span>; &lt;span class=&quot;n&quot;>;response&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Net&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;HTTP&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;url&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;JSON&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;parse&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;response&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check the status code to make sure the request was successful&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;status&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;OK&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Extract the formatted address from the first result&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;results&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;address&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;formatted_address&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Address: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;address&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Reverse geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;status&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Using the Mapbox API &lt;/h2>; &lt;p>;Mapbox is another popular mapping platform that provides a geocoding API. Like the Google Maps API, it requires creating an API key and making HTTP requests to its geocoding endpoint.&lt;/p>; &lt;p>;To get started with the Mapbox API, you will need to sign up for a Mapbox account and create an API key. Once you have an API key, you can use it to make geocoding requests in Ruby using the Net::HTTP class.&lt;/p>; &lt;p>;For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;net/http&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;uri&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Replace YOUR_API_KEY with your actual API key&lt;/span>; &lt;span class=&quot;n&quot;>;api_key&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;YOUR_API_KEY&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set up the URL for the geocoding request&lt;/span>; &lt;span class=&quot;n&quot;>;url&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;URI&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;https://api.mapbox.com/geocoding/v5/mapbox.places/1600+Amphitheatre+Parkway,+Mountain+View,+CA.json?access_token=&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;api_key&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Make the request and parse the response&lt;/span>; &lt;span class=&quot;n&quot;>;response&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Net&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;HTTP&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;url&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;JSON&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;parse&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;response&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check the status code to make sure the request was successful&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;code&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Ok&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Extract the latitude and longitude from the first result&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;features&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;lat&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;center&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;lng&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;center&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Latitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;lat&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Longitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;lng&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;message&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;You can also perform reverse geocoding using the Mapbox API by making a request to the reverse endpoint and passing in the latitude and longitude coordinates. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Set up the URL for the reverse geocoding request&lt;/span>; &lt;span class=&quot;n&quot;>;url&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;URI&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;https://api.mapbox.com/geocoding/v5/mapbox.places/37.423021,-122.083739.json?access_token=&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;api_key&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Make the request and parse the response&lt;/span>; &lt;span class=&quot;n&quot;>;response&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Net&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;HTTP&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;url&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;JSON&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;parse&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;response&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check the status code to make sure the request was successful&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;code&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Ok&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Extract the formatted address from the first result&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;features&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;address&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;place_name&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Address: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;address&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Reverse geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;message&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In this article, we have explored how to perform geocoding with Ruby using the geocoder gem, the Google Maps API, and the Mapbox API. Each of these approaches has its own strengths and limitations, and you can choose the one that best fits your needs.&lt;/p>; &lt;p>;Whether you are building a mapping application, a location-based service, or just need to convert addresses to coordinates for some other purpose, geocoding is a valuable tool that can help you work with geographical data in your Ruby projects.&lt;/p>;</description><category>红宝石</category><category>教程</category></item><item><title>10 (advanced) Ruby Interview Question</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Tue, 20 Dec 2022 09:12:55 +0000</pubDate><link/> https://dev.to/daviducolo/10-advanced-ruby-interview-question-3ba5<guid> https://dev.to/daviducolo/10-advanced-ruby-interview-question-3ba5</guid><description> &lt;h2>; [1] What is a singleton method in Ruby and how do you define one? &lt;/h2>; &lt;p>;A singleton method is a method that is defined on a single instance of an object, rather than on the object&#39;s class as a whole. To define a singleton method, you use the define_singleton_method method and pass it the method name and a block of code that defines the method&#39;s behavior. Here is an example of defining a singleton method:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Fido&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nc&quot;>;dog&lt;/span>;&lt;span class=&quot;o&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Woof!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Woof!&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [2] What is metaprogramming in Ruby and how does it work? &lt;/h2>; &lt;p>;Metaprogramming in Ruby refers to the ability to write code that can generate or modify other code at runtime. This is achieved through the use of various metaprogramming techniques such as method_missing, define_method, and eval. Here is an example of using the define_method method to define a new method at runtime:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nc&quot;>;self&lt;/span>;&lt;span class=&quot;o&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;define_bark&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;breed&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;define_method&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;:bark&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Woof! I am a &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;breed&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;.&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;define_bark&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Labrador&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Woof! I am a Labrador.&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [3] What is a module in Ruby and how do you use them? &lt;/h2>; &lt;p>;A module in Ruby is a collection of methods and constants that can be included in a class. Modules are used to provide additional functionality to a class without the need for inheritance. To include a module in a class, you use the include keyword followed by the module name. Here is an example of using a module:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;module&lt;/span>; &lt;span class=&quot;nn&quot;>;Barkable&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Woof!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;kp&quot;>;include&lt;/span>; &lt;span class=&quot;no&quot;>;Barkable&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Woof!&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [4] How do you implement the observer pattern in Ruby? &lt;/h2>; &lt;p>;The observer pattern is a design pattern in which an object (the subject) maintains a list of dependencies (observers) and notifies them when its state changes. To implement the observer pattern in Ruby, you can use the Observer library, which provides a set of classes and methods for creating observers and subjects. Here is an example of using the Observer library:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;observer&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;kp&quot;>;include&lt;/span>; &lt;span class=&quot;no&quot;>;Observable&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;n&quot;>;changed&lt;/span>; &lt;span class=&quot;n&quot;>;notify_observers&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;barking&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Owner&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;update&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;event&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Dog is &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;event&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;.&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;owner&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Owner&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_observer&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;owner&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Dog is barking.&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [5] What is the difference between a class variable and a class instance variable in Ruby? &lt;/h2>; &lt;p>;A class variable in Ruby is a variable that is shared among all instances of a class. It is defined with the @@ symbol and is available to all methods of the class. Here is an example of using a class variable:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;vc&quot;>;@@num_dogs&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>; &lt;span class=&quot;vc&quot;>;@@num_dogs&lt;/span>; &lt;span class=&quot;o&quot;>;+=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nc&quot;>;self&lt;/span>;&lt;span class=&quot;o&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;num_dogs&lt;/span>; &lt;span class=&quot;vc&quot;>;@@num_dogs&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog1&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog2&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;num_dogs&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs 2&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;A class instance variable, on the other hand, is a variable that is specific to a particular instance of a class. It is defined with the @ symbol and is only available to the instance&#39;s methods. Here is an example of using a class instance variable:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;vi&quot;>;@name&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, my name is &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;vi&quot;>;@name&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog1&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Fido&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;dog1&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Hello, my name is Fido!&quot;&lt;/span>; &lt;span class=&quot;n&quot;>;dog2&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Buddy&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;dog2&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Hello, my name is Buddy!&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [6] What is the difference between the freeze and seal methods in Ruby? &lt;/h2>; &lt;p>;The freeze method in Ruby is used to prevent an object from being modified. Once an object is frozen, any attempts to modify it will raise a RuntimeError. The seal method, on the other hand, is used to prevent an object from being modified or extended. It can be thought of as a stricter version of the freeze method. Here is an example of using the freeze and seal methods:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;string&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;hello&quot;&lt;/span>; &lt;span class=&quot;n&quot;>;string&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;freeze&lt;/span>; &lt;span class=&quot;n&quot;>;string&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot; world&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# raises a RuntimeError&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;seal&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;mi&quot;>;4&lt;/span>; &lt;span class=&quot;c1&quot;>;# raises a RuntimeError&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [7] What is the difference between a lazy enumerator and a regular enumerator in Ruby? &lt;/h2>; &lt;p>;A lazy enumerator in Ruby is an enumerator that generates its values on demand, rather than generating all of the values upfront. This can be useful for working with large datasets or when only a subset of the values is needed. A regular enumerator, on the other hand, generates all of the values upfront. To create a lazy enumerator in Ruby, you can use the lazy method of the Enumerator class. Here is an example of using a lazy enumerator:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;lazy_enumerator&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;o&quot;>;..&lt;/span>;&lt;span class=&quot;no&quot;>;Float&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;INFINITY&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;lazy&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;select&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;%&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;n&quot;>;lazy_enumerator&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;take&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;5&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to_a&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs [2, 4, 6, 8, 10]&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [8] What is a method_missing in Ruby and how do you use it? &lt;/h2>; &lt;p>;The method_missing method in Ruby is a special method that is called when a method is called on an object that does not exist. It allows you to define a custom behavior for handling missing methods. To use method_missing, you define a method_missing method in your class and use the super keyword to call the original method_missing method. Here is an example of using method_missing:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Woof!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;method_missing&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;method_name&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>;&lt;span class=&quot;n&quot;>;arguments&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;amp;&lt;/span>;&lt;span class=&quot;n&quot;>;block&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;method_name&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;ss&quot;>;:fetch&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Fetching the ball!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;k&quot;>;super&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Woof!&quot;&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;fetch&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Fetching the ball!&quot;&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;sit&lt;/span>; &lt;span class=&quot;c1&quot;>;# raises a NoMethodError&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the method_missing method is used to handle the fetch method if it is called on the dog object. If the method is not fetch, the super keyword is used to call the original method_missing method and raise a NoMethodError if the method does not exist.&lt;/p>; &lt;h2>; [9] What is the difference between a proc and a lambda in Ruby? &lt;/h2>; &lt;p>;A proc in Ruby is a block of code that can be stored in a variable and passed around like an object. It is created using the proc keyword or the Proc.new method. A lambda is similar to a proc, but it has stricter rules for argument checking and return behavior. It is created using the lambda keyword or the -&amp;gt; operator. Here is an example of using a proc and a lambda:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;proc&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;nb&quot;>;proc&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;nb&quot;>;proc&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;call&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs 1&lt;/span>; &lt;span class=&quot;nb&quot;>;lambda&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;o&quot;>;-&amp;gt;&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;nb&quot;>;lambda&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;call&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs 1&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [10] What is the difference between the map and collect methods in Ruby? &lt;/h2>; &lt;p>;The map and collect methods in Ruby are both used to transform a collection of items by applying a block of code to each item and returning a new collection with the transformed items. The main difference between the two methods is that map returns a new array, while collect returns a new object of the same type as the original collection. Here is an example of using the map and collect methods:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;new_array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;map&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# new_array is [2, 4, 6]&lt;/span>; &lt;span class=&quot;nb&quot;>;hash&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;a: &lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;b: &lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;c: &lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;n&quot;>;new_hash&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;nb&quot;>;hash&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;collect&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;k&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;v&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;k&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;v&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;p&quot;>;}.&lt;/span>;&lt;span class=&quot;nf&quot;>;to_h&lt;/span>; &lt;span class=&quot;c1&quot;>;# new_hash is { a: 2, b: 4, c: 6 }&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>;</description><category>红宝石</category><category>programming</category><category> career</category></item><item><title> 10 (simple) Ruby Interview Question</title><dc:creator>戴维·桑坦杰罗</dc:creator><pubDate>Tue, 20 Dec 2022 09:06:53 +0000</pubDate><link/> https://dev.to/daviducolo/10-simple-ruby-interview-question-1jae<guid> https://dev.to/daviducolo/10-simple-ruby-interview-question-1jae</guid><description> &lt;h2>; [1] What is a block in Ruby and how is it different from a proc? &lt;/h2>; &lt;p>;A block in Ruby is a piece of code that can be passed as an argument to a method. It is different from a proc (short for &quot;procedure&quot;) in that a block is not an object and cannot be stored in a variable or passed around like a proc can. Here is an example of a block being used with the each method:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;].&lt;/span>;&lt;span class=&quot;nf&quot;>;each&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;num&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;n&quot;>;num&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [2] How do you define a method in Ruby? &lt;/h2>; &lt;p>;To define a method in Ruby, you use the def keyword followed by the method name and any arguments the method takes. The method&#39;s code goes between the def and end keywords. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;greet&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [3] What is the difference between an instance variable and a local variable in Ruby? &lt;/h2>; &lt;p>;An instance variable in Ruby is a variable that is associated with a specific instance of an object. It starts with an @ symbol and is available to any methods defined within the object. Here is an example of using an instance variable:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;vi&quot;>;@name&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, my name is &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;vi&quot;>;@name&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Fido&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Hello, my name is Fido!&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;A local variable is a variable that is only available within the context in which it is defined, such as within a method or loop. It does not have the @ symbol at the beginning of its name.&lt;/p>; &lt;h2>; [4] How do you create a new object in Ruby? &lt;/h2>; &lt;p>;To create a new object in Ruby, you use the new method of the class you want to create an instance of. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Fido&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This creates a new Dog object with the name &quot;Fido&quot;.&lt;/p>; &lt;h2>; [5] What is the purpose of the each method in Ruby? &lt;/h2>; &lt;p>;The each method in Ruby is used to iterate over a collection of items, such as an array or hash. It takes a block of code as an argument, and the block is executed once for each item in the collection. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;].&lt;/span>;&lt;span class=&quot;nf&quot;>;each&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;num&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;n&quot;>;num&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This code will output the numbers 1, 2, and 3 on separate lines.&lt;/p>; &lt;h2>; [6] How do you create a new class in Ruby and what is the syntax for doing so? &lt;/h2>; &lt;p>;To create a new class in Ruby, you use the class keyword followed by the class name and any parent class it may inherit from. The class&#39;s code goes between the class and end keywords. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;vi&quot;>;@name&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, my name is &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;vi&quot;>;@name&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [7] What is the difference between a symbol and a string in Ruby? &lt;/h2>; &lt;p>;A symbol in Ruby is a representation of a name, similar to a string. However, symbols are immutable (meaning they cannot be changed) and are stored in a single memory location. This means that two symbols with the same name will be the same object in memory, while two strings with the same contents will be separate objects. Here is an example of using symbols:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;:symbol_name &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Strings are used to represent text and can be created with either single or double quotes. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;s2&quot;>;&quot;string&quot;&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;string&#39;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [8] How do you raise an exception in Ruby and what is the syntax for doing so? &lt;/h2>; &lt;p>;To raise an exception in Ruby, you use the raise method and pass it the name of the exception class you want to raise. You can also include a message as an argument to provide more information about the exception. Here is an example of raising an exception:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ArgumentError&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Invalid argument&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will raise an ArgumentError exception with the message &quot;Invalid argument&quot;.&lt;/p>; &lt;h2>; [9] What is the purpose of the Rails framework and how does it work? &lt;/h2>; &lt;p>;The Rails framework is a web application development framework written in Ruby. It is designed to make it easier to develop web applications by providing a set of conventions and tools for common tasks such as routing, database management, and testing. Rails uses the Model-View-Controller (MVC) architecture to separate the application&#39;s data and business logic from the user interface.&lt;/p>; &lt;h2>; [10] How do you implement inheritance in a Ruby class and what is the syntax for doing so? &lt;/h2>; &lt;p>;To implement inheritance in a Ruby class, you use the &amp;lt; operator followed by the name of the parent class. The child class will inherit all of the methods and behavior of the parent class. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;vi&quot;>;@name&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, my name is &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;vi&quot;>;@name&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Puppy&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;wag_tail&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Wagging tail!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;puppy&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Puppy&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Buddy&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;puppy&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Hello, my name is Buddy!&quot;&lt;/span>; &lt;span class=&quot;n&quot;>;puppy&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;wag_tail&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Wagging tail!&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the Puppy class inherits from the Dog class and has access to the greet method, as well as its own wag_tail method.&lt;/p>;</description><category>红宝石</category><category>programming</category><category> career</category></item></channel></rss>