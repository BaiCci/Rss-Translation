<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>开发社区👩‍💻👨‍💻：Davide Santangelo</title><description> DEV 社区 👩‍💻👨‍💻 上的最新文章，作者是 Davide Santangelo (@daviducolo)。</description><link/> https://dev.to/daviducolo<image/><url> https://res.cloudinary.com/practicaldev/image/fetch/s--NjqSqeaj--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com /uploads/user/profile_image/2717/1445be1a-9ad4-4b8e-a617-5ee32761493c.jpeg</url><title>开发社区👩‍💻👨‍💻：Davide Santangelo</title><link/> https://dev.to/daviducolo <atom:link href="https://dev.to/feed/daviducolo.rss" rel="self" type="application/rss+xml"></atom:link><language>恩</language><item><title>使用 Ruby 的排序算法</title><dc:creator>戴维·桑坦杰洛</dc:creator><pubDate>Thu, 16 Feb 2023 10:33:14 +0000</pubDate><link/> https://dev.to/daviducolo/sorting-algorithms-with-ruby-4o18<guid> https://dev.to/daviducolo/sorting-algorithms-with-ruby-4o18</guid><description> &lt;p>;排序算法是将列表或数组的元素按特定顺序排列的算法。有多种排序算法，每种算法在时间和空间复杂度方面各有优缺点。以下是一些最常见的排序算法：&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;&lt;strong>;冒泡排序&lt;/strong>;：冒泡排序是一种简单的排序算法，它反复遍历列表，比较相邻元素&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;选择排序&lt;/strong>;：选择排序是一种从未排序列表中选择最小元素的排序算法在每次迭代中并将其放在列表的开头。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;插入排序&lt;/strong>;：插入排序是一种构建最终排序列表的排序算法一个项目。它遍历输入数组并在每次迭代中删除一个元素，找到它在排序列表中所属的位置，并将其插入那里。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;合并排序&lt;/strong >;：归并排序是一种分而治之的算法，它将输入数组分成两半，对每一半进行排序，然后将已排序的两半合并。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;快速排序&lt;/strong>;：快速排序是一种分而治之的算法，它从数组中选择一个“枢轴”元素，然后根据它们是小于还是大于枢轴将其他元素划分为两个子数组。然后它递归地对子数组进行排序。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;堆排序&lt;/strong>;：堆排序是一种基于比较的排序算法，它使用二叉堆数据结构。首先，它根据输入数据构建堆，然后从堆中重复提取最大元素，从而得到排序数组。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;基数排序&lt; /strong>;: Radix Sort 是一种排序算法，按数字位置对数据进行排序。它通过比较每个待排序项目中相同位置的数字来对数据进行排序。&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;这些算法中的每一个都有自己的时间和空间复杂度，可能或多或少适用于不同类型的数据和输入大小。出于性能原因，为特定用例选择合适的算法可能很重要。&lt;/p>; &lt;h2>; 冒泡排序 &lt;/h2>; &lt;p>;冒泡排序，有时也称为下沉排序，是一种重复步骤的简单排序算法通过列表，比较相邻的元素，如果它们的顺序错误则交换它们。重复遍历列表直到列表排序。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot; k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;bubble_sort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class =&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt; span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;length&lt;/span>; &lt;span class=&quot;kp&quot;>;loop&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span >; &lt;span class=&quot;n&quot;>;交换&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;kp&quot;>;假&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt; /span>;&lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;o&quot;>;-&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>; ).&lt;/span>;&lt;span class=&quot;nf&quot;>;次&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot; n&quot;>;i&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class =&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;spa n class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;o&quot;>;+&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span >;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt; /span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot; >;i&lt;/span>;&lt;span class=&quot;o&quot;>;+&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot; o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class =&quot;o&quot;>;+&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;交换&lt;/ span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end &lt;/span>; &lt;span class=&quot;k&quot;>;中断&lt;/span>; &lt;span class=&quot;k&quot;>;如果&lt;/span>; &lt;span class=&quot;n&quot;>;不&lt;/span>; &lt;span class=&quot;n&quot; >;交换&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt; /pre>; &lt;/di v>; &lt;h2>; 选择排序 &lt;/h2>; &lt;p>;选择排序是一种就地比较排序算法，它将输入列表分为两部分：已排序项目的子列表，它是从左到右在列表的前面，以及占据列表其余部分的剩余待排序项目的子列表。该算法在未排序的子列表中找到最小值并将其与最左边的未排序元素交换，将子列表边界向右移动一个元素。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt; pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;selection_sort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/ span>; &lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;长度&lt;/span>; &lt;span class=&quot;k&quot;>;for &lt;/span>; &lt;span class=&quot;n&quot;>;i&lt;/span>; &lt;span class=&quot;k&quot;>;在&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;o&quot; >;...&lt;/span>;&lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;n&quot;>;min_idx&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span 类=&quot;n&quot;>;i&lt;/span>; &lt;span class=&quot;k&quot;>;for&lt;/span>; &lt;span class=&quot;n&quot;>;j&lt;/span>; &lt;span class=&quot;k&quot;>;in&lt;/span>; &lt; span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;o&quot;>;+&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span >;&lt;span class=&quot;p&quot;>;)&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span>;&lt;span class=&quot; n&quot;>;n&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class =&quot;n&quot;>;j&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;min_idx&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;min_idx&lt;/跨度>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;j&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot; >;],&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;min_idx&lt;/span>;&lt;span class= &quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;min_idx&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span >;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt; /span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>;插入排序&lt;/h2>; &lt;p>;插入排序是一种简单的排序算法，一次构建最终排序的数组一个项目。它在大型列表上的效率远低于更高级的算法，例如快速排序、堆排序或归并排序。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot; >;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;insertion_sort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot; >;数组&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot; n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;length&lt;/span>; &lt;span class=&quot;k&quot;>;for&lt;/span>; &lt;span class =&quot;n&quot;>;i&lt;/span>; &lt;span class=&quot;k&quot;>;在&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span >;&lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;n&quot;>;键&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt; /span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>; j&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;i&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>; &lt;span class=&quot;mi &quot;>;1&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;n&quot;>;j&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;=&lt;/span>; &lt;span等级ss=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;amp;&amp;amp;&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt; /span>;&lt;span class=&quot;n&quot;>;j&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;n&quot; >;key&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;j&lt;/span>;&lt;span class=&quot; o&quot;>;+&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span 类=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;j&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt; span class=&quot;n&quot;>;j&lt;/span>; &lt;span class=&quot;o&quot;>;-=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/ span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;j&lt;/span>;&lt;span class=&quot;o&quot;>;+ &lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot; >;key&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt; /pre>; &lt;/div>; &lt;h2>; 归并排序 &lt;/h2>; &lt;p>;归并排序是一种高效的、通用的、基于比较的排序算法。大多数实现会产生稳定的排序，这意味着如果两个元素具有相同的值，它们将保留它们在排序序列中的相对顺序。&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt; pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;merge_sort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/ span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;长度&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;=&lt;/span>; &lt;span class=&quot;mi&quot; >;1&lt;/span>; &lt;span class=&quot;k&quot;>;返回&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot; n&quot;>;mid&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class =&quot;nf&quot;>;长度&lt;/span>; &lt;span class=&quot;o&quot;>;/&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>; &lt;span class=&quot;n&quot;>;左&lt;/span>; &lt; span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span >;&lt;span class=&quot;o&quot;>;...&lt;/span>;&lt;span class=&quot;n&quot;>;中间&lt;/span >;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;右&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;数组&lt; /span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;中&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span>;&lt;span class=&quot;n &quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;长度&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class= &quot;n&quot;>;left&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;merge_sort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;左&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;右&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;merge_sort&lt;/span>;&lt;span class=&quot;p&quot;>;（&lt;/span>;&lt;span class=&quot;n&quot;>;右&lt;/span>;&lt;span class=&quot;p&quot;>;）&lt;/ span>; &lt;span class=&quot;n&quot;>;合并&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;离开&lt;/span>;&lt;span class=&quot;p&quot;>;, &lt;/span>; &lt;span class=&quot;n&quot;>;右&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;k&quot; >;def&lt;/span>; &lt;span class=&quot;nf&quot;>;merge&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;left&lt;/span>;&lt;span class=&quot; p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;右&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n &quot;>;结果&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[]&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class =&quot;n&quot;>;左&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;长度&lt;/span>; &lt;span class=&quot;o&quot;>;>;&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;amp;&amp;amp;&lt;/span>; &lt;span class=&quot;n&quot;>;右&lt;/span>;&lt;span class=&quot;p&quot;>; .&lt;/span>;&lt;span class=&quot;nf&quot;>;长度&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot; k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;left&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class =&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;=&lt;/span>; &lt;span class=&quot;n&quot;>;右&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span >;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;结果&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt; &amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;左&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;shift&lt;/span>; &lt;span class=&quot; k&quot;>;其他&lt;/span>; &lt;span class=&quot;n&quot;>;结果&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;正确&lt;/span>; &lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;转移&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/spa n>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;k&quot;>;同时&lt;/span>; &lt;span class=&quot;n&quot;>;离开&lt;/span>;&lt;span class=&quot;p&quot;>;。 &lt;/span>;&lt;span class=&quot;nf&quot;>;长度&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;n &quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;left&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt; span class=&quot;nf&quot;>;shift&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;n&quot;>;right&lt;/span >;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;长度&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;mi&quot;>;0 &lt;/span>; &lt;span class=&quot;n&quot;>;结果&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;正确&lt;/span>;&lt;span class= &quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;shift&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; 快速排序&lt;/h2>; &lt;p>;快速排序是一种使用分而治之技术的排序算法对数组进行排序。它是最有效的排序算法之一，平均时间复杂度为 O(n*log(n))。快速排序的基本思想是选取一个基准元素，围绕基准对数组进行分区，然后对左右子数组进行递归排序。&lt;/p>; &lt;p>;以下是执行快速排序的详细步骤：&lt;/p >; &lt;ol>; &lt;li>;&lt;p>;从数组中选择一个主元。通常，枢轴元素被选为数组中的最后一个元素。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;将数组分成两个子数组：左边的子数组包含所有小于枢轴的元素，右边的子数组子数组包含大于或等于主元的所有元素。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;递归地将快速排序算法应用于左右子数组。&lt;br>; &lt;/p>;&lt;/li>; &lt;/ol>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;快速排序&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k &quot;>;返回&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class= &quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;大小&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;c1&quot;>;# 选择枢轴元素&lt;/span>; &lt;span class=&quot;n&quot;>;pivot&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot; >;arr&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;last&lt;/span>; &lt;spa n class=&quot;c1&quot;>;#将数组分成两个子数组&lt;/span>; &lt;span class=&quot;n&quot;>;left&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p &quot;>;[]&lt;/span>; &lt;span class=&quot;n&quot;>;右&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[]&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;o&quot;>;...-&lt; /span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;].&lt;/span>;&lt;span class=&quot;nf&quot;>;每个&lt;/span>; &lt;span class=&quot;k&quot; >;做&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot; k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;枢轴&lt;/span>; &lt;span class=&quot;n&quot;>;left&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt; /span>; &lt;span class=&quot;n&quot;>;右&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot; k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# 对左右子数组递归应用快速排序&lt;/span>; &lt;span class=&quot;k&quot; >;返回&lt;/span>; &lt;span class=&quot;n&quot;>;quickso rt&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;左&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;o &quot;>;+&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;枢轴&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class= &quot;o&quot;>;+&lt;/span>; &lt;span class=&quot;n&quot;>;快速排序&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;右&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# 用法示例&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/ span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;7&lt;/span>;&lt;span class=&quot;p&quot;>;, &lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;9&lt;/span>;&lt;span class=&quot;p&quot; >;,&lt;/span>; &lt;span class=&quot;mi&quot;>;4&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot; p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;8&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;5&lt;/span>;&lt;span 类=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;6&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt; span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;sorted_arr&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;快速排序&lt;/ span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>;放&lt;/span>; &lt;span class=&quot;n&quot;>;sorted_arr&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;检查&lt;/span>; &lt;span class=&quot;c1&quot; >;# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;在上面的代码中，快速排序函数将数组 arr 作为输入并返回排序后的数组。如果数组大小小于或等于 1，则按原样返回输入数组。否则，它选择数组中的最后一个元素作为主元，使用主元将数组划分为两个子数组，然后递归地将快速排序算法应用于左右子数组。最后，它连接已排序的左子数组、主元和已排序的右子数组，并返回已排序的数组。&lt;/p>; &lt;h2>; 堆排序 &lt;/h2>; &lt;p>;堆排序是一种基于比较的排序算法，它使用一个二叉堆数据结构。它首先从输入数据构建一个堆，然后重复从堆中提取最大元素，从而得到一个排序数组。堆排序的时间复杂度是O(n*log(n))。&lt;/p>; &lt;p>;下面是堆排序的详细步骤：&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;建立一个max来自输入数组的堆。最大堆是一棵二叉树，其中每个父节点的值都大于或等于其子节点的值。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;从堆中提取最大元素并将其放置在数组的末尾。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Heapify 堆的剩余元素。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;重复步骤 2 和 3，直到堆是空的。&lt;br>; &lt;/p>;&lt;/li>; &lt;/ol>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby​​&quot;>;&lt;code>;&lt;span class=&quot;k &quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;heapsort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class= &quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;length&lt;/span>; &lt;span class=&quot;c1&quot;>;# 从输入数组构建最大堆&lt;/span>; &lt;span class=&quot; p&quot;>;((&lt;/span>;&lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;/&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span >;&lt;span class=&quot;nf&quot;>;向下&lt;/span>;&lt;span c lass=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;heapify&lt;/ span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;n &lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot; >;end&lt;/span>; &lt;span class=&quot;c1&quot;>;#从堆中取出最大元素放在数组末尾&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span >;&lt;span class=&quot;nf&quot;>;向下&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt; /span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;o&quot;>; |&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p &quot;>;],&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/sp一个&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[ &lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p &quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;heapify&lt;/span>;&lt;span class= &quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;结束&lt;/span>; &lt;span class=&quot;k&quot;>;return&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Heapify a以节点 i 为根的子树，它是 arr 中的一个索引。 n 是堆的大小&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;heapify&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/ span>; &lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;最大&lt;/span>; &lt;span class=&quot;o&quot;>;= &lt;/span>; &lt;span class=&quot;n&quot;>;i&lt;/span>; &lt;span class=&quot;n&quot;>;l&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot; >;(&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot; p&quot;>;)&lt;/span>; &lt;span class=&quot;o&quot;>;+&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;r&lt;/span>; &lt;span 类=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt; span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;o&quot;>;+&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span >; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;l&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;n &lt;/span>; &lt;span class=&quot;o&quot;>;&amp;amp;&amp;amp;&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class= &quot;n&quot;>;l &lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;n&quot;>;等&lt;/span>;&lt;span class=&quot;p &quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;最大&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;最大&lt;/span>; &lt;span class= &quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;l&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;r&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;amp;&amp;amp; &lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;r&lt;/span>;&lt;span class=&quot;p&quot; >;]&lt;/span>; &lt;span class=&quot;o&quot;>;>;&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class= &quot;n&quot;>;最大&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;最大&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;r&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;最大&lt;/span>; &lt;span class=&quot;o&quot;>;!=&lt;/span>; &lt;span class=&quot;n&quot;>;i&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt; /span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot; >;[&lt;/span>;&lt;span class=&quot;n&quot;>;最大&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot; n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;最大&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;heapify&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;整理&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/ span>; &lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;最大&lt;/span>;&lt;span class=&quot;p&quot;>;) &lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# 用法示例&lt;/span>; &lt;span class=&quot; n&quot;>;arr&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;7&lt;/span>;&lt;span 类=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;9&lt;/span>;&lt; span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;4&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span >;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;8&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;5&lt; /跨度>;&lt;s pan class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;6&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span >;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;sorted_arr&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;heapsort&lt; /span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>; puts&lt;/span>; &lt;span class=&quot;n&quot;>;sorted_arr&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;检查&lt;/span>; &lt;span class=&quot;c1 &quot;>;# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;在上面的代码中，堆排序函数将数组 arr 作为输入并返回使用堆排序排序的数组。它首先使用 heapify 函数从输入数组构建一个最大堆。 heapify 函数将数组 arr、堆的大小 n 和索引 i 作为输入，并堆化以节点 i 为根的子树。然后重复从堆中提取最大元素并将其放在数组的末尾，然后对堆的剩余元素进行堆化。最后，它返回排序后的数组。&lt;/p>; &lt;h2>; 基数排序&lt;/h2>; &lt;p>;基数排序是一种按数字位置对数据进行排序的排序算法。它通过比较每个要排序的项目中相同位置的数字来对数据进行排序。基数排序通常用于对数字进行排序，但它也可以用于对字符串或其他可以按其单个字符进行排序的数据类型进行排序。&lt;/p>; &lt;p>;以下是执行基数排序的详细步骤：&lt;/p>; p>; &lt;ol>; &lt;li>;&lt;p>;找出输入数组中的最大数并计算其中的位数。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;从最低有效位（最右边）开始), 使用计数排序对输入数组进行排序。&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;移动到下一位（向左）并使用计数排序再次对输入数组进行排序。&lt;/p>;&lt;/ li>; &lt;li>;&lt;p>;重复步骤 3，直到所有数字都已排序。&lt;br>; &lt;/p>;&lt;/li>; &lt;/ol>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class= &quot;高亮红宝石&quot;>;&lt;c​​ode>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;radixsort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class =&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;max_value&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt; span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;max&lt;/span>; &lt;span class=&quot;n&quot;>;num_digits&lt;/span >; &lt; span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;数学&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;log10&lt;/span >;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;max_value&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to_i &lt;/span>; &lt;span class=&quot;o&quot;>;+&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;num_digits&lt;/span>;&lt;span class=&quot;p&quot; >;.&lt;/span>;&lt;span class=&quot;nf&quot;>;次&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot; n&quot;>;d&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;counting_sort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class =&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;d&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt; span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# 对输入进行排序使用计数排序按数字 d 排列&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;counting_sort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;d&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/跨度>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>; =&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;长度&lt;/span>; &lt;span class=&quot;n &quot;>;计数&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class= &quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;10&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;输出&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;数组&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;新建&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/ span>;&lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;#统计arr中每个数字出现的次数&lt;/span >; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;。&lt;/span>;&lt;span class=&quot;nf&quot;>;每个&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt; /span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;数字&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;o &quot;>;/&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;10&lt;/span>; &lt;span class=&quot;o&quot;>;**&lt;/span>; &lt;span class=&quot;n&quot;>;d&lt;/span>;&lt;span class=&quot;p&quot;>;))&lt;/span>; &lt;span class=&quot;o&quot;>;%&lt;/ span>; &lt;span class=&quot;mi&quot;>;10&lt;/span>; &lt;span class=&quot;n&quot;>;计数&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;位数&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;+=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;k &quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;#修改计数以包含小于或等于每个数字的元素数&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span>;&lt;span class=&quot;mi&quot;>;10&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt; /span>;&lt;span class=&quot;nf&quot;>;每个&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>; i&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;计数&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n &quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;+=&lt;/span>; &lt;span class=&quot;n&quot;>;计数&lt;/span>;&lt;span class =&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt; span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;#构建通过将每个元素放置在其正确排序位置的输出数组&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>; -&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;向下&lt;/span>;&lt;span class=&quot; p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class =&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt; span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span >;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;数字&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt; /span>;&lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;o&quot;>;/&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>; 10&lt;/span>; &lt;span class=&quot;o&quot;>;**&lt;/span>; &lt;span class=&quot;n&quot;>;d&lt;/span>;&lt;span class=&quot;p&quot;>;))&lt;/span>; &lt;span class= &quot;o&quot;>;%&lt;/span>; &lt;span class=&quot;mi&quot;>;10&lt;/span>; &lt;span class=&quot;n&quot;>;输出&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;计数&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;位数&lt;/span>;&lt;sp an class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span >; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;n&quot;>;计数&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt; /span>;&lt;span class=&quot;n&quot;>;digit&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;-=&lt;/span>; &lt;span class=&quot;mi&quot; >;1&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;#将输出数组复制回输入数组&lt;/span>; &lt;span class=&quot;n&quot;>;arr &lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;each_index&lt;/span>; &lt;span class=&quot;k&quot;>;做&lt;/span>; &lt;span class=&quot;o&quot; >;|&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot; p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span 类=&quot;n&quot;>;输出&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt; span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# 用法示例&lt;/span>; &lt;span class=&quot;n&quot;>;arr&lt; /span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot; >;170&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;45&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;75&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;90&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;802&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;24&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;66&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;sorted_arr&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;radixsort&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;arr&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;n&quot;>;sorted_arr&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;inspect&lt;/span>; &lt;span class=&quot;c1&quot;>;# Output: [2, 24, 45, 66, 75, 90, 170, 802]&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In the above code, the radixsort function takes an array arr as input and returns a sorted array using Radix Sort. It first finds the maximum value in the input array and counts the number of digits in it. It then sorts the input array by digit positions starting from the least significant digit using the counting_sort function. The counting_sort function takes an array arr and a digit position d as input and sorts the input array by digit d using counting sort. Finally, it returns the sorted array.&lt;/p>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In conclusion, sorting algorithms are an essential part of computer science and are used extensively in a wide range of applications. There are many different types of sorting algorithms, each with their strengths and weaknesses, which make them suited for different use cases. Some algorithms like Quick Sort are generally faster than others, while others like Radix Sort are specialized for certain types of data.&lt;/p>; &lt;p>;It&#39;s important to choose the right sorting algorithm for the job and to understand the performance characteristics of each algorithm. The time and space complexity of a sorting algorithm are important factors to consider when choosing an algorithm for a particular task. Additionally, some sorting algorithms like Merge Sort and Heap Sort are stable, meaning that they preserve the relative order of equal elements in the input array, while others like Quick Sort are not.&lt;/p>; &lt;p>;Overall, a good understanding of sorting algorithms is an important tool in a programmer&#39;s toolbox, and choosing the right algorithm for a given task can have a significant impact on the performance of an application.&lt;/p>;</description><category> ruby</category><category> beginners</category><category> tutorial</category><category> programming</category></item><item><title> Nested ActiveRecord Transactions</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Thu, 09 Feb 2023 13:55:39 +0000</pubDate><link/> https://dev.to/daviducolo/nested-activerecord-transactions-199n<guid> https://dev.to/daviducolo/nested-activerecord-transactions-199n</guid><description> &lt;p>;Nested ActiveRecord transactions are a common feature in many Ruby on Rails applications, providing a convenient way to handle complex data transactions and ensure the consistency of the data. However, when not used properly, nested transactions can lead to unexpected behaviors and data inconsistencies. This article will highlight some of the pitfalls of using nested ActiveRecord transactions and how to avoid them.&lt;/p>; &lt;h2>; Nested transactions can cause deadlocks &lt;/h2>; &lt;p>;Deadlocks occur when two or more transactions are trying to access the same database resource simultaneously and each transaction is waiting for the other to complete, leading to a frozen state. In nested transactions, if one of the transactions fails, it will cause the entire transaction to be rolled back, but the other transactions may still be waiting for the resource, leading to a deadlock. To avoid this, it is recommended to avoid using too many nested transactions and to limit the number of transactions to a reasonable level.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;create_user_and_post&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;transaction&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# create user&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;create!&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;name: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Davide Santangelo&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# create post&lt;/span>; &lt;span class=&quot;no&quot;>;Post&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;transaction&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# create post&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;posts&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;create!&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;title: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Hello World&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# simulate failure&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Rollback&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;title&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello World&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# simulate failure&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Rollback&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;name&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Davide Santangelo&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, if the inner transaction fails, the outer transaction will also roll back, but the post will still be created, leading to a deadlock. To avoid this, it is recommended to avoid using too many nested transactions and to limit the number of transactions to a reasonable level.&lt;/p>; &lt;h2>; Nested transactions can cause inconsistencies &lt;/h2>; &lt;p>;Nested transactions can lead to inconsistencies when the inner transactions are committed but the outer transactions are rolled back. For example, if an inner transaction updates a record and the outer transaction rolls back, the record will remain updated even though the entire transaction was supposed to be rolled back. To avoid this, it is recommended to use savepoints in the inner transactions, which will allow you to roll back to a specific point in the transaction, rather than rolling back the entire transaction.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;update_user_and_post&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;transaction&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# find user&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;find&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# update user&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;update!&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;name: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Davide Santangelo&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;no&quot;>;Post&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;transaction&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# find post&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;posts&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;first&lt;/span>; &lt;span class=&quot;c1&quot;>;# update post&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;update!&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;title: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Hello Universe&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# simulate failure&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Rollback&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;title&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello Universe&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# simulate failure&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Rollback&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;name&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Davide Santangelo&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, if the inner transaction fails, the post will still be updated, leading to an inconsistency. To avoid this, it is recommended to use savepoints in the inner transactions, which will allow you to roll back to a specific point in the transaction, rather than rolling back the entire transaction.&lt;/p>; &lt;h2>; Nested transactions can cause performance issues &lt;/h2>; &lt;p>;Nested transactions can lead to performance issues, especially when there are many nested transactions, as each transaction requires a separate database connection. This can cause increased overhead and slower performance, especially when dealing with large amounts of data. To avoid this, it is recommended to use transactions sparingly and only when necessary.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;update_user_and_post&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;transaction&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# find user&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;find&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# update user&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;update!&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;name: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Davide Santangelo&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Base&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;transaction&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;savepoint: &lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# find post&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;posts&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;first&lt;/span>; &lt;span class=&quot;c1&quot;>;# update post&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;update!&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;title: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Hello Universe&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# simulate failure&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Rollback&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;title&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello Universe&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# simulate failure&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ActiveRecord&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Rollback&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;name&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Davide Santangelo&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;By using savepoints, the update to the post will be rolled back, while the update to the user will remain, avoiding any inconsistencies.&lt;/p>; &lt;h2>; One last example &lt;/h2>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;BankAccount&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;has_many&lt;/span>; &lt;span class=&quot;ss&quot;>;:transactions&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;transfer&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;to&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;amount&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;transaction&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;nb&quot;>;self&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;balance&lt;/span>; &lt;span class=&quot;o&quot;>;-=&lt;/span>; &lt;span class=&quot;n&quot;>;amount&lt;/span>; &lt;span class=&quot;nb&quot;>;self&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;save!&lt;/span>; &lt;span class=&quot;n&quot;>;transaction&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;to&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;balance&lt;/span>; &lt;span class=&quot;o&quot;>;+=&lt;/span>; &lt;span class=&quot;n&quot;>;amount&lt;/span>; &lt;span class=&quot;n&quot;>;to&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;save!&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the transfer method transfers money from one bank account to another by performing two database operations: decreasing the balance of the current account and increasing the balance of the destination account. To ensure that both operations are atomic and can be rolled back if either fails, the method uses nested transactions.&lt;/p>; &lt;p>;The outer transaction block uses the transaction method provided by ActiveRecord, which opens a database transaction. If any exception is raised within the block, the transaction is automatically rolled back and the changes made within the block are discarded.&lt;/p>; &lt;p>;The inner transaction block performs the second database operation within the context of the outer transaction. This means that if an exception is raised within the inner transaction block, the entire transaction (both the outer and the inner transactions) will be rolled back, ensuring that the database remains in a consistent state.&lt;/p>; &lt;p>;Note that in this example, the save! method is used instead of the save method. The save! method raises an exception if the validation of the model fails, whereas the save method simply returns false in that case. By using save!, the method ensures that an exception is raised if either of the two save operations fail, triggering a rollback of the transaction.&lt;/p>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In conclusion, nested ActiveRecord transactions can be a powerful tool in ensuring the consistency of data in Ruby on Rails applications, but it is important to be aware of the potential pitfalls and to use them carefully. By understanding these pitfalls, you can avoid deadlocks and inconsistencies, and ensure that your transactions are executed smoothly and correctly.&lt;/p>;</description><category> ruby</category><category> rails</category><category> beginners</category><category> performance</category></item><item><title> Rails Model Validation: A Comprehensive Guide with Code Examples</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Thu, 02 Feb 2023 07:45:11 +0000</pubDate><link/> https://dev.to/daviducolo/rails-model-validation-a-comprehensive-guide-with-code-examples-21mh<guid> https://dev.to/daviducolo/rails-model-validation-a-comprehensive-guide-with-code-examples-21mh</guid><description> &lt;p>;Ruby on Rails provides a variety of built-in validation methods that help ensure that data stored in your database is consistent and meets certain criteria. These validations can be specified directly in your model files, making them easy to manage and maintain.&lt;/p>; &lt;p>;Here are some of the most common validation methods available in Rails:&lt;/p>; &lt;h2>; Presence Validation &lt;/h2>; &lt;p>;The simplest type of validation is the presence validation, which ensures that a particular field is not empty. For example, if you want to ensure that the name field of a User model is always present, you would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:name&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;presence: &lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Length Validation &lt;/h2>; &lt;p>;Another common type of validation is the length validation, which restricts the length of a string field. For example, if you want to ensure that the password field of a User model is at least 8 characters long, you would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:password&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;length: &lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;minimum: &lt;/span>;&lt;span class=&quot;mi&quot;>;8&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;You can also specify a maximum length for a field, or both a minimum and a maximum length:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:password&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;length: &lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;minimum: &lt;/span>;&lt;span class=&quot;mi&quot;>;8&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;maximum: &lt;/span>;&lt;span class=&quot;mi&quot;>;20&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Format Validation &lt;/h2>; &lt;p>;Format validation is used to ensure that a field matches a certain pattern, such as a specific email format or a zip code format. For example, if you want to ensure that the email field of a User model is in the proper format, you would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:email&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;format: &lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;with: &lt;/span>;&lt;span class=&quot;sr&quot;>;/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[az]{2,})\z/i&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;on: :create&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Uniqueness Validation &lt;/h2>; &lt;p>;Uniqueness validation ensures that a particular field is unique across all records in the database. For example, if you want to ensure that the email field of a User model is unique, you would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:email&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;uniqueness: &lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Numericality Validation &lt;/h2>; &lt;p>;Numericality validation ensures that a particular field is a number. You can also specify additional constraints, such as ensuring that the number is greater than or equal to a certain value, or that it is an integer. For example, if you want to ensure that the age field of a User model is a number greater than or equal to 18, you would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:age&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;numericality: &lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;greater_than_or_equal_to: &lt;/span>;&lt;span class=&quot;mi&quot;>;18&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Confirmation Validation &lt;/h2>; &lt;p>;Confirmation validation ensures that a field is confirmed by a second field. For example, if you want to ensure that a user has confirmed their password by entering it twice, you would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:password&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;confirmation: &lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In the view, you would have two fields, one for the password and one for the confirmation, and the confirmation field would be named &lt;strong>;password_confirmation&lt;/strong>;.&lt;/p>; &lt;h2>; Inclusion Validation &lt;/h2>; &lt;p>;Inclusion validation is used to ensure that a field is included in a specific set of values. For example, if you want to ensure that a User model has a role field that is either &lt;strong>;admin&lt;/strong>;, &lt;strong>;moderator&lt;/strong>;, or &lt;strong>;member&lt;/strong>;, you would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:role&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;inclusion: &lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;in: &lt;/span>;&lt;span class=&quot;sx&quot;>;%w(admin moderator member)&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Exclusion Validation &lt;/h2>; &lt;p>;Exclusion validation is used to ensure that a field is not included in a specific set of values. For example, if you want to ensure that a User model does not have a role field that is &lt;strong>;admin&lt;/strong>; or &lt;strong>;root&lt;/strong>;, you would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:role&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;exclusion: &lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;in: &lt;/span>;&lt;span class=&quot;sx&quot;>;%w(admin root)&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Custom Message Validation &lt;/h2>; &lt;p>;You can also specify custom error messages for each validation. For example, if you want to display a custom error message when a User model&#39;s email is not in the proper format, you would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:email&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;format: &lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;with: &lt;/span>;&lt;span class=&quot;sr&quot;>;/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[az]{2,})\z/i&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;message: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;is not a valid email address&quot;&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Conditional Validation &lt;/h2>; &lt;p>;Conditional validation allows you to specify that a validation should only occur if a certain condition is met. You can specify the condition using the &lt;strong>;if&lt;/strong>; option. For example, if you want to ensure that a User model&#39;s password is at least 8 characters long only if the password field is not nil, you could write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:password&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;length: &lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;minimum: &lt;/span>;&lt;span class=&quot;mi&quot;>;8&lt;/span>; &lt;span class=&quot;p&quot;>;},&lt;/span>; &lt;span class=&quot;ss&quot;>;if: :password_not_nil&lt;/span>; &lt;span class=&quot;kp&quot;>;private&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;password_not_nil&lt;/span>; &lt;span class=&quot;n&quot;>;password&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;present?&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Multiple Validations &lt;/h2>; &lt;p>;You can use multiple validations on a single field by chaining validations together. For example, if you want to ensure that a User model&#39;s email is present, is in the proper format, and is unique, you could write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:email&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;presence: &lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;format: &lt;/span>;&lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;with: &lt;/span>;&lt;span class=&quot;sr&quot;>;/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[az]{2,})\z/i&lt;/span>; &lt;span class=&quot;p&quot;>;},&lt;/span>; &lt;span class=&quot;ss&quot;>;uniqueness: &lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Custom Validation &lt;/h2>; &lt;p>;In addition to the built-in validation methods, Rails also allows you to create custom validations. For example, if you want to ensure that a User model has a unique combination of a first and last name, you could write a custom validation method:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validate&lt;/span>; &lt;span class=&quot;ss&quot;>;:unique_name&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;unique_name&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;exists?&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;first_name: &lt;/span>;&lt;span class=&quot;n&quot;>;first_name&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;last_name: &lt;/span>;&lt;span class=&quot;n&quot;>;last_name&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;errors&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;:first_name&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;and last name have already been taken&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;or if you want to ensure that the name of a User model is always capitalized, you could write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;validate&lt;/span>; &lt;span class=&quot;ss&quot;>;:name_must_be_capitalized&lt;/span>; &lt;span class=&quot;kp&quot;>;private&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;name_must_be_capitalized&lt;/span>; &lt;span class=&quot;n&quot;>;errors&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;:name&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;must be capitalized&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;unless&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;nil?&lt;/span>; &lt;span class=&quot;o&quot;>;||&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;capitalize&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Association Validation &lt;/h2>; &lt;p>;In addition to validating individual models, you can also validate associations between models. Association validation allows you to specify validations for a model that depends on the state of other models.&lt;/p>; &lt;p>;For example, if a User model has many Posts, you could validate that a User must have at least one post before it can be saved to the database. You would write the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;User&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;has_many&lt;/span>; &lt;span class=&quot;ss&quot;>;:posts&lt;/span>; &lt;span class=&quot;n&quot;>;validates_associated&lt;/span>; &lt;span class=&quot;ss&quot;>;:posts&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Post&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;no&quot;>;ApplicationRecord&lt;/span>; &lt;span class=&quot;n&quot;>;belongs_to&lt;/span>; &lt;span class=&quot;ss&quot;>;:user&lt;/span>; &lt;span class=&quot;n&quot;>;validates&lt;/span>; &lt;span class=&quot;ss&quot;>;:title&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;presence: &lt;/span>;&lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, a User will not be saved to the database unless it has at least one associated Post with a title.&lt;/p>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In conclusion, validations are an important part of any Rails application. By using validations, you can ensure that your data is always accurate, consistent, and meets the criteria you specify. &lt;/p>; &lt;p>;Whether you&#39;re validating individual models or associations between models, Rails makes it easy to specify and enforce your validation rules. With the power of Rails validations, you can make your application more robust and reliable, ensuring that the data entered by your users is always accurate and consistent.&lt;/p>; &lt;p>;For more information and a complete guide on Rails validations, visit the official Ruby on Rails documentation at &lt;a href=&quot;https://guides.rubyonrails.org/active_record_validations.html&quot;>;https://guides.rubyonrails.org/active_record_validations.html&lt;/a>;.&lt;/p>;</description><category> rails</category><category> ruby</category><category> tutorial</category><category> beginners</category></item><item><title> Rails &quot;db:....&quot; commands explained!</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Thu, 26 Jan 2023 08:33:34 +0000</pubDate><link/> https://dev.to/daviducolo/rails-db-commands-explained-22mf<guid> https://dev.to/daviducolo/rails-db-commands-explained-22mf</guid><description> &lt;p>;When you run the &lt;strong>;rails&lt;/strong>; command inside a Rails project you will get the list of all commands that can be launched in a Rails application.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight shell&quot;>;&lt;code>;rails The most common rails commands are: generate Generate new code &lt;span class=&quot;o&quot;>;(&lt;/span>;short-cut &lt;span class=&quot;nb&quot;>;alias&lt;/span>;: &lt;span class=&quot;s2&quot;>;&quot;g&quot;&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; console Start the Rails console &lt;span class=&quot;o&quot;>;(&lt;/span>;short-cut &lt;span class=&quot;nb&quot;>;alias&lt;/span>;: &lt;span class=&quot;s2&quot;>;&quot;c&quot;&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; server Start the Rails server &lt;span class=&quot;o&quot;>;(&lt;/span>;short-cut &lt;span class=&quot;nb&quot;>;alias&lt;/span>;: &lt;span class=&quot;s2&quot;>;&quot;s&quot;&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>;test &lt;/span>;Run tests except system tests &lt;span class=&quot;o&quot;>;(&lt;/span>;short-cut &lt;span class=&quot;nb&quot;>;alias&lt;/span>;: &lt;span class=&quot;s2&quot;>;&quot;t&quot;&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>;test&lt;/span>;:system Run system tests dbconsole Start a console &lt;span class=&quot;k&quot;>;for &lt;/span>;the database specified &lt;span class=&quot;k&quot;>;in &lt;/span>;config/database.yml &lt;span class=&quot;o&quot;>;(&lt;/span>;short-cut &lt;span class=&quot;nb&quot;>;alias&lt;/span>;: &lt;span class=&quot;s2&quot;>;&quot;db&quot;&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; new Create a new Rails application. &lt;span class=&quot;s2&quot;>;&quot;rails new my_app&quot;&lt;/span>; creates a new application called MyApp &lt;span class=&quot;k&quot;>;in&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;./my_app&quot;&lt;/span>; plugin new Create a new Rails railtie or engine All commands can be run with &lt;span class=&quot;nt&quot;>;-h&lt;/span>; &lt;span class=&quot;o&quot;>;(&lt;/span>;or &lt;span class=&quot;nt&quot;>;--help&lt;/span>;&lt;span class=&quot;o&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;for &lt;/span>;more information. In addition to those commands, there are: about action_mailbox:ingress:exim action_mailbox:ingress:postfix action_mailbox:ingress:qmail action_mailbox:install action_mailbox:install:migrations action_text:install action_text:install:migrations active_storage:install app:template app:update assets:clean[keep] assets:clobber assets:environment assets:precompile cache_digests:dependencies cache_digests:nested_dependencies credentials:diff credentials:edit credentials:show db:create db:drop db:encryption:init db:environment:set db:fixtures:load db:migrate db:migrate:down db:migrate:redo db:migrate:status db:migrate:up db:prepare db:reset db:rollback db:schema:cache:clear db:schema:cache:dump db:schema:dump db:schema:load db:seed db:seed:replant db:setup db:system:change db:version destroy dev:cache encrypted:edit encrypted:show importmap:install initializers log:clear middleware notes restart routes runner secret secrets:edit secrets:setup secrets:show stats stimulus:install stimulus:install:importmap stimulus:install:node tailwindcss:build tailwindcss:clobber tailwindcss:install tailwindcss:watch &lt;span class=&quot;nb&quot;>;test&lt;/span>;:all &lt;span class=&quot;nb&quot;>;test&lt;/span>;:db &lt;span class=&quot;nb&quot;>;time&lt;/span>;:zones[country_or_offset] tmp:clear tmp:create turbo:install turbo:install:importmap turbo:install:node turbo:install:redis version yarn:install zeitwerk:check &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;in this article we will only analyze the &lt;strong>;db commands&lt;/strong>;. you can get them by running:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;rails | grep db: &lt;/code>;&lt;/pre>; &lt;/div>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;db:drop db:encryption:init db:environment:set db:fixtures:load db:migrate db:migrate:down db:migrate:redo db:migrate:status db:migrate:up db:prepare db:reset db:rollback db:schema:cache:clear db:schema:cache:dump db:schema:dump db:schema:load db:seed db:seed:replant db:setup db:system:change db:version &lt;/code>;&lt;/pre>; &lt;/div>; &lt;ul>; &lt;li>;&lt;p>;&lt;strong>;db:create&lt;/strong>;: This command is used to create a new database with the same name as the current environment (eg development, production) specified in your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:drop&lt;/strong>;: This command is used to delete an existing database with the same name as the current environment specified in your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:encryption:init&lt;/strong>;: This command is used to encrypt the database credentials in your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:environment:set&lt;/strong>;: This command is used to set the current environment for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:fixtures:load&lt;/strong>;: This command is used to load fixtures (pre-defined data) into the database for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:migrate&lt;/strong>;: This command is used to run any pending database migrations for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:migrate:down&lt;/strong>;: This command is used to rollback the last migration for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:migrate:redo&lt;/strong>;: This command is used to rollback the last migration and run it again for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:migrate:status&lt;/strong>;: This command is used to check the status of migrations for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:migrate:up&lt;/strong>;: This command is used to run a specific migration for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:prepare&lt;/strong>;: This command is used to prepare the database for the current environment in your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:reset&lt;/strong>;: This command is used to drop and create the database with the same name as the current environment specified in your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:rollback&lt;/strong>;: This command is used to rollback the last migration for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:schema:cache:clear&lt;/strong>;: This command is used to clear the schema cache for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:schema:cache:dump&lt;/strong>;: This command is used to dump the schema cache to a file for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:schema:dump&lt;/strong>;: This command is used to dump the current schema of the database as a Ruby file for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:schema:load&lt;/strong>;: This command is used to load a schema file into the database for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:seed&lt;/strong>;: This command is used to load seed data into the database for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:seed:replant&lt;/strong>;: This command is used to reload seed data into the database for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:setup&lt;/strong>;: This command is used to create, load the schema and seed data into the database for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:system:change&lt;/strong>;: This command is used to change the database system for your Rails application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;db:version&lt;/strong>;: This command is used to check the version of the migrations for your Rails application.&lt;/p>;&lt;/li>; &lt;/ul>; &lt;p>;In conclusion, the various Rails commands that were discussed, such as db:create, db:migrate, db:seed are used to manage and interact with the database of a Rails application. They allow developers to create, modify, and seed the database, as well as generate boilerplate code for different parts of the application. &lt;/p>; &lt;p>;These commands are powerful tools that can greatly simplify the development process, but it is important to use them with caution and make sure to have proper backups or version control in place before making any changes to the application. Understanding and utilizing these commands can help developers to more efficiently and effectively build and maintain their Rails applications.&lt;/p>;</description></item><item><title> A &quot;Shallow&quot; Dive into Memory Leaks in Ruby</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Fri, 20 Jan 2023 08:50:49 +0000</pubDate><link/> https://dev.to/daviducolo/memory-leak-and-ruby-a1m<guid> https://dev.to/daviducolo/memory-leak-and-ruby-a1m</guid><description> &lt;h2>; Intro &lt;/h2>; &lt;p>;A memory leak is a type of software bug where a program or application continuously allocates memory but fails to properly deallocate it, causing the memory usage to increase over time. This can lead to the program crashing or freezing if it exhausts the available memory resources. Memory leaks can occur in any programming language, but are particularly common in C and C++ programs due to the manual memory management. Common causes of memory leaks include failing to free memory that is no longer needed, or creating circular references where two objects refer to each other and prevent the memory manager from freeing their memory. Memory leaks can be difficult to detect and fix, but tools such as memory profilers and leak detectors can help.&lt;/p>; &lt;p>;Memory leaks can also occur in systems that use automatic memory management, such as those that use garbage collection. In these systems, a memory leak can occur when the garbage collector is unable to determine that a piece of memory is no longer in use and therefore cannot free it.&lt;/p>; &lt;p>;Memory leaks can have serious consequences, such as causing a program to slow down or crash, or causing a system to become unstable or unresponsive. In some cases, a memory leak can even lead to a security vulnerability, as it can cause a program to allocate so much memory that it exhausts the available resources and causes other programs to fail.&lt;/p>; &lt;p>;To detect and fix memory leaks, developers can use tools such as memory profilers and leak detectors. These tools can provide information on memory usage and can help identify the source of a leak. Additionally, good programming practices such as proper memory management, and using smart pointers, RAII, and garbage collection can also help to prevent memory leaks.&lt;/p>; &lt;p>;It&#39;s important to note that memory leaks are not always easy to detect and fix, and can require a significant amount of time and effort to resolve. However, identifying and addressing memory leaks is crucial for the stability and performance of any program or application.&lt;/p>; &lt;p>;In a garbage collected language like &lt;strong>;Ruby&lt;/strong>;, memory leaks can occur when objects are not properly cleaned up by the garbage collector.&lt;/p>; &lt;p>;There are several ways in which memory leaks can occur in Ruby, including:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Circular references: A circular reference occurs when two or more objects hold references to each other. This can prevent the garbage collector from being able to clean up the objects, leading to a memory leak.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Long-lived objects: Objects that are no longer needed, but are not properly cleaned up by the garbage collector, can lead to a memory leak.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Event handlers: Event handlers that are not properly unregistered can lead to a memory leak.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Singletons: Singleton objects, if not properly managed, can lead to a memory leak.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;h2>; Techniques &lt;/h2>; &lt;p>;To avoid memory leaks in Ruby, it is important to understand the ways in which memory leaks can occur and to use best practices to prevent them.&lt;/p>; &lt;p>;One way to avoid circular references is to use weak references. A weak reference is a reference that does not prevent the garbage collector from cleaning up the object. In Ruby, the &lt;strong>;WeakRef&lt;/strong>; class provides a way to create weak references.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;weakref&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Foo&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>; &lt;span class=&quot;vi&quot;>;@bar&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, World!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;foo&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Foo&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;weak_foo&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;WeakRef&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;foo&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Another way to avoid memory leaks is to use the &lt;strong>;ObjectSpace&lt;/strong>; module to manually mark objects as eligible for garbage collection. This can be useful in situations where the garbage collector is not able to properly clean up objects.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;objspace&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Foo&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>; &lt;span class=&quot;vi&quot;>;@bar&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, World!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;foo&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Foo&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;no&quot;>;ObjectSpace&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;define_finalizer&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;foo&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;nb&quot;>;proc&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;nb&quot;>;id&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Object &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;nb&quot;>;id&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>; has been GCed&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;})&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;To avoid memory leaks due to event handlers, it&#39;s important to unregister event handlers when they are no longer needed. A common pattern is to use a block and pass self to the block. This way the block will have access to the instance and can unregister the event handler.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Foo&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>; &lt;span class=&quot;vi&quot;>;@listener&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;EventHandler&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;vi&quot;>;@listener&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;register&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;self&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;event&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;event received: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;event&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;unregister_listener&lt;/span>; &lt;span class=&quot;vi&quot;>;@listener&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;unregister&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;self&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Finally, it&#39;s important to properly manage singletons in Ruby. One way to do this is to use the &lt;strong>;singleton&lt;/strong>; module and the instance method to create a singleton object.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;singleton&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Foo&lt;/span>; &lt;span class=&quot;kp&quot;>;include&lt;/span>; &lt;span class=&quot;no&quot;>;Singleton&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>; &lt;span class=&quot;vi&quot;>;@bar&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, World!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;foo&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Foo&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;instance&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Simulation &lt;/h2>; &lt;p>;Simulating a memory leak in a program can be done by creating a program that continuously allocates memory without releasing it. Here is an example of a simple Ruby script that simulates a memory leak:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Simulating a memory leak&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[]&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;a&quot;&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;c1&quot;>;# Allocate 1MB of memory&lt;/span>; &lt;span class=&quot;nb&quot;>;sleep&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;c1&quot;>;# Wait for 1 second before allocating more memory&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This script creates an array, leak_array, and continuously appends a string of 1MB to it. This will cause the program&#39;s memory usage to continuously grow, simulating a memory leak.&lt;/p>; &lt;p>;To correct this memory leak, we need to ensure that the memory is properly released when it is no longer needed. One way to do this is to periodically empty the &lt;strong>;leak_array&lt;/strong>;:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Correcting a memory leak&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[]&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;a&quot;&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;nb&quot;>;sleep&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;clear&lt;/span>; &lt;span class=&quot;c1&quot;>;# Release the memory&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Another way to correct the memory leak is to use a different data structure, such as a queue, where old elements are automatically removed as new elements are added.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Correcting a memory leak&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;queue&#39;&lt;/span>; &lt;span class=&quot;n&quot;>;leak_queue&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Queue&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;leak_queue&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;a&quot;&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;nb&quot;>;sleep&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;The Queue class in Ruby is a commonly used data structure that can lead to memory leaks if not used correctly. Here are a few examples of how memory leaks can occur with the Queue class:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Forgetting to remove items from the queue: If items are continuously pushed onto a Queue instance without removing them, the queue can grow larger and larger over time, eventually exhausting the available memory. To prevent this, developers should make sure to call the pop method on the queue after processing each item.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Holding onto references of items within the queue: If objects that are added to the queue are referenced elsewhere in the application and those references are not cleared, the objects will not be garbage collected even after they are removed from the queue. This can cause the memory usage to grow indefinitely, as the objects accumulate in the queue. To prevent this, developers should make sure to remove any references to objects after they are no longer needed.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Using threads and not terminating them: If a Queue instance is used with multiple threads, and the threads are not properly terminated, the Queue instance can become a source of memory leaks. When threads are not properly terminated, they can keep references to the objects they were processing in the queue, preventing them from being garbage collected. To prevent this, developers should ensure that all threads are properly terminated after they have finished their work.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Using Queue#clear: If a Queue instance is cleared using the clear method, but the objects within the queue are not explicitly removed from memory, the memory allocated to those objects will not be reclaimed by the garbage collector. This can lead to memory leaks as the number of objects that have been added to the queue grows. To prevent this, developers should ensure that any objects added to the queue are removed from memory once they are no longer needed, even if the queue is cleared.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;Overall, it is crucial to be aware of how the Queue class is being used and to adopt best practices to prevent memory leaks. By properly managing the queue and the objects within it, developers can avoid memory leaks and ensure that their applications run efficiently and reliably.&lt;/p>; &lt;p>;You can also use &lt;strong>;GC.start&lt;/strong>; to force a garbage collection and release the unused memory.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Correcting a memory leak&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[]&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;kp&quot;>;true&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;leak_array&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;a&quot;&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;1024&lt;/span>; &lt;span class=&quot;nb&quot;>;sleep&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;no&quot;>;GC&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;start&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In conclusion, understanding the causes of memory leaks and using best practices to prevent them is essential for maintaining the performance and stability of Ruby applications. By using techniques such as weak references, manual garbage collection, unregistering event handlers, and properly managing singletons, developers can prevent memory leaks and ensure that their applications run smoothly.&lt;/p>; &lt;p>;It&#39;s important to note that memory leaks can be difficult to detect and diagnose, and the correct solution will depend on the specific cause of the leak. It is always a good practice to monitor the memory usage of an application and to use tools such as &lt;strong>;ObjectSpace&lt;/strong>; to inspect objects and track down memory leaks.&lt;/p>; &lt;p>;Developers must pay close attention to memory management and monitor the memory usage of their applications to detect and diagnose leaks. Memory leaks can lead to poor performance and instability, which can have a significant impact on user experience. Therefore, it is essential to take proactive steps to prevent them, and it is a good practice to incorporate memory management into the development process from the start. By doing so, developers can ensure that their applications run smoothly and deliver a great user experience.&lt;/p>;</description><category> ruby</category><category> tutorial</category><category> performance</category><category> programming</category></item><item><title> Matrix + Graph in Ruby</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Tue, 10 Jan 2023 07:24:58 +0000</pubDate><link/> https://dev.to/daviducolo/matrix-graph-in-ruby-7pk<guid> https://dev.to/daviducolo/matrix-graph-in-ruby-7pk</guid><description> &lt;h2>; Introduction to Matrices in Ruby &lt;/h2>; &lt;p>;A matrix is a two-dimensional array of numbers. It is often used to represent and manipulate linear transformations in mathematics and computer science. In ruby, we can represent a matrix as an array of arrays, with each inner array representing a row of the matrix.&lt;/p>; &lt;p>;Here is an example of how to create a matrix in ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Create a 3x3 matrix with all zeros&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# Create a 2x2 matrix with specific values&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;4&lt;/span>;&lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Create a 3x3 identity matrix&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;i&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;j&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;i&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;n&quot;>;j&lt;/span>; &lt;span class=&quot;p&quot;>;?&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;p&quot;>;:&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;We can access the elements of a matrix using the [] operator. For example, to get the element at the second row and third column of the matrix above, we can do the following:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;To perform operations on matrices, we can use the Matrix class from the matrix library in ruby. This class provides methods for matrix addition, subtraction, multiplication, and other operations.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;matrix&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Create two matrices&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_a&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;4&lt;/span>;&lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_b&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot;mi&quot;>;5&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;6&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;7&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;8&lt;/span>;&lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Perform matrix addition&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_c&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_a&lt;/span>; &lt;span class=&quot;o&quot;>;+&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_b&lt;/span>; &lt;span class=&quot;c1&quot;>;# Perform matrix multiplication&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_d&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_a&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;n&quot;>;matrix_b&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Graphs and Matrices &lt;/h2>; &lt;p>;A graph is a collection of interconnected nodes or vertices, represented by points on a plane. These nodes can be connected by edges, which represent the relationships between the nodes.&lt;/p>; &lt;p>;In computer science, graphs are often used to represent networks, such as social networks or communication networks. They can also be used to represent data structures, such as trees and lists.&lt;/p>; &lt;p>;There are two common ways to represent graphs in computer algorithms: adjacency lists and adjacency matrices.&lt;/p>; &lt;p>;An adjacency list represents a graph as an array of linked lists. Each element in the array represents a node in the graph, and the linked list for that element contains the nodes that are connected to it by an edge.&lt;/p>; &lt;p>;An adjacency matrix is a two-dimensional matrix that represents a graph. The rows and columns of the matrix represent the nodes in the graph, and the elements of the matrix represent the edges between the nodes.&lt;/p>; &lt;p>;Here is an example of how to create an adjacency matrix for a simple graph in ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Create an empty matrix with the same number of rows and columns as the number of nodes in the graph&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;num_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;num_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set the elements of the matrix to 1 to represent the edges between the nodes&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;We can use the adjacency matrix to represent the graph and perform operations on it. For example, we can use it to determine the degree of a node, which is the number of edges connected to it. To do this, we can sum the elements in the row or column of the matrix corresponding to the node.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Find the degree of node 0&lt;/span>; &lt;span class=&quot;n&quot;>;degree&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;].&lt;/span>;&lt;span class=&quot;nf&quot;>;sum&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;We can also use the adjacency matrix to determine whether there is an edge between two nodes. If the element at the intersection of the rows and columns corresponding to the nodes is 1, then there is an edge. If it is 0, then there is no edge.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Check if there is an edge between node 0 and node 1&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;There is an edge between node 0 and node 1&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;There is no edge between node 0 and node 1&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Another operation we can perform on a graph using its adjacency matrix is finding the shortest path between two nodes. This can be done using algorithms such as Dijkstra&#39;s algorithm or the Floyd-Warshall algorithm.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Find the shortest path between node 0 and node 2 using Dijkstra&#39;s algorithm&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;set&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;dijkstra&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;source&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;target&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Initialize distances and previous nodes&lt;/span>; &lt;span class=&quot;n&quot;>;distances&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;size&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;no&quot;>;Float&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;INFINITY&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;prev_nodes&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;size&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;kp&quot;>;nil&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;distances&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;source&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;c1&quot;>;# Create a set of unvisited nodes&lt;/span>; &lt;span class=&quot;n&quot;>;unvisited_nodes&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Set&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;((&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span>;&lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;size&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to_a&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Iterate until there are no unvisited nodes&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;o&quot;>;!&lt;/span>;&lt;span class=&quot;n&quot;>;unvisited_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;empty?&lt;/span>; &lt;span class=&quot;c1&quot;>;# Find the node with the minimum distance&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;unvisited_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;min_by&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;node&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;distances&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;node&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# Break if we have reached the target node&lt;/span>; &lt;span class=&quot;k&quot;>;break&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;n&quot;>;target&lt;/span>; &lt;span class=&quot;c1&quot;>;# Remove the current node from the set of unvisited nodes&lt;/span>; &lt;span class=&quot;n&quot;>;unvisited_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;delete&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Update the distances of the neighbors&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span>;&lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;size&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;each&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;neighbor&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;c1&quot;>;# Skip if there is no edge between the current node and the neighbor&lt;/span>; &lt;span class=&quot;k&quot;>;next&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;n&quot;>;neighbor&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;c1&quot;>;# Calculate the distance to the neighbor&lt;/span>; &lt;span class=&quot;n&quot;>;alt&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;distances&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;+&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;n&quot;>;neighbor&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Update the distance and previous node if necessary&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;alt&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;n&quot;>;distances&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;neighbor&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;distances&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;neighbor&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;alt&lt;/span>; &lt;span class=&quot;n&quot;>;prev_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;neighbor&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Return the shortest path&lt;/span>; &lt;span class=&quot;n&quot;>;path&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[]&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;target&lt;/span>; &lt;span class=&quot;k&quot;>;while&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;n&quot;>;path&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;unshift&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;curr_node&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;prev_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;curr_node&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;path&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;shortest_path&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;dijkstra&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Incidence Matrices &lt;/h2>; &lt;p>;In addition to adjacency matrices, another way to represent a graph using a matrix is through an incidence matrix. An incidence matrix is a matrix with a row for each node and a column for each edge, and the elements of the matrix represent whether a node is connected to an edge.&lt;/p>; &lt;p>;Here is an example of how to create an incidence matrix for a simple graph in ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Create an empty matrix with the same number of rows as the number of nodes and the same number of columns as the number of edges&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;num_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;no&quot;>;Array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;num_edges&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set the elements of the matrix to 1 to represent the connections between the nodes and edges&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;We can use the incidence matrix to perform various operations on the graph, such as finding the degree of a node or determining the endpoints of an edge.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Find the degree of node 0&lt;/span>; &lt;span class=&quot;n&quot;>;degree&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;].&lt;/span>;&lt;span class=&quot;nf&quot;>;sum&lt;/span>; &lt;span class=&quot;c1&quot;>;# Find the endpoints of edge 1&lt;/span>; &lt;span class=&quot;n&quot;>;endpoints&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;o&quot;>;...&lt;/span>;&lt;span class=&quot;n&quot;>;num_nodes&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;select&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;node&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;matrix&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;node&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; NetworkX &lt;/h2>; &lt;p>;The &lt;a href=&quot;https://github.com/SciRuby/networkx.rb&quot;>;networkx&lt;/a>; library is a powerful tool for working with graphs in ruby. It provides classes for representing graphs, as well as algorithms for analyzing and manipulating them.&lt;/p>; &lt;p>;Here is an example of how to use networkx to create and manipulate a graph:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;networkx&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Create an empty graph&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;NetworkX&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;Graph&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;c1&quot;>;# Add nodes to the graph&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_node&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_node&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_node&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Add edges to the graph&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_edge&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_edge&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_edge&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Find the degree of node 0&lt;/span>; &lt;span class=&quot;n&quot;>;degree&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;degree&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Find the shortest path between node 0 and node 2&lt;/span>; &lt;span class=&quot;n&quot;>;shortest_path&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;NetworkX&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;shortest_path&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;g&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;Matrices are a powerful tool for representing and manipulating graphs in computer algorithms. Whether you use adjacency matrices, incidence matrices, or a library like networkx, there are many ways to work with graphs in ruby. I hope this article has been helpful in understanding some of the basics and giving you some ideas for further exploration.&lt;/p>;</description><category> ruby</category><category> programming</category></item><item><title> Ruby (love) RSpec</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Mon, 02 Jan 2023 10:41:10 +0000</pubDate><link/> https://dev.to/daviducolo/ruby-rspec-5eo6<guid> https://dev.to/daviducolo/ruby-rspec-5eo6</guid><description> &lt;h2>; Intro &lt;/h2>; &lt;p>;Testing is an essential part of the software development process. It helps ensure that your code is correct, reliable, and maintainable. There are many different approaches to testing, and each has its own benefits and drawbacks.&lt;/p>; &lt;p>;In the Ruby programming language, one of the most popular testing frameworks is &lt;strong>;RSpec&lt;/strong>;. &lt;a href=&quot;https://rspec.info&quot;>;RSpec&lt;/a>; is a flexible and expressive testing tool that allows you to write and run automated tests for your Ruby code.&lt;/p>; &lt;p>;There are many reasons why testing is important, particularly when it comes to Ruby. Here are a few of the key benefits of testing your Ruby code:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Catching Bugs: Testing helps you catch bugs in your code before they become a problem. By running a suite of tests, you can quickly identify any issues and fix them before they cause problems in production.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Ensuring Quality: Testing helps you ensure that your code is of high quality. By writing tests that cover all of the different scenarios and edge cases, you can be confident that your code is working as intended.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Facilitating Maintenance: Tests make it easier to maintain and modify your code over time. If you have a comprehensive suite of tests, you can make changes to your code with confidence, knowing that you have a safety net to catch any issues that might arise.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Documentation: Tests can serve as documentation for your code. By looking at the tests, you can see exactly how the code is intended to behave and what it is supposed to do.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;In short, testing is an important part of the software development process, and RSpec is a powerful tool for testing Ruby code. By writing and running tests, you can ensure that your code is correct, reliable, and maintainable.&lt;/p>; &lt;h2>; What is RSpec? &lt;/h2>; &lt;p>;RSpec is a testing tool for the Ruby language that allows you to write and run automated tests for your code. It is designed to be expressive and easy to use, making it a popular choice for testing Ruby applications.&lt;/p>; &lt;p>;RSpec tests are written in Ruby and are typically stored in files with a .rb extension. These files contain test cases, which are sets of expectations about the behavior of your code. When you run your tests, RSpec will execute each test case and report whether the code behaved as expected.&lt;/p>; &lt;h2>; Getting Started with RSpec &lt;/h2>; &lt;p>;To use RSpec, you will need to have Ruby installed on your machine. You can then install RSpec by running the following command:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;gem install rspec &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will install the RSpec gem, which includes all of the necessary files and libraries for running RSpec tests.&lt;/p>; &lt;p>;Once RSpec is installed, you can create a new test file by creating a new file with a .rb extension and adding the following code at the top of the file:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;require &#39;rspec&#39; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This line will include the RSpec library in your test file, allowing you to use all of the RSpec functions and syntax.&lt;/p>; &lt;h2>; Basic RSpec Syntax &lt;/h2>; &lt;p>;RSpec tests are organized into test suites, which are defined using the describe block. Within the describe block, you can define individual test cases using the it block.&lt;/p>; &lt;p>;Here is an example of a simple RSpec test suite:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;describe&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;MyTestSuite&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;does something&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# test code goes here&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Within the it block, you can use various RSpec methods to define your expectations about the behavior of your code. For example, you can use the expect method to specify what you expect the result of a certain operation to be.&lt;/p>; &lt;p>;Here is an example of an RSpec test case that uses the expect method:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;adds two numbers&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;add&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;eq&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;5&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, we are calling the add method with the arguments 2 and 3, and expecting the result to be 5. If the add method returns 5 as expected, then the test will pass. If the add method returns any other value, the test will fail.&lt;/p>; &lt;h2>; Common RSpec Matchers &lt;/h2>; &lt;p>;Here is a list of some common RSpec matchers that you can use to define your expectations in your test cases:&lt;/p>; &lt;ul>; &lt;li>; &lt;strong>;eq&lt;/strong>;: This matcher checks if the actual value is equal to the expected value.&lt;/li>; &lt;li>; &lt;strong>;be&lt;/strong>;: This matcher checks if the actual value is the same object as the expected value.&lt;/li>; &lt;li>; &lt;strong>;include&lt;/strong>;: This matcher checks if the actual value is an array or string that includes the expected value.&lt;/li>; &lt;li>; &lt;strong>;raise_error&lt;/strong>;: This matcher checks if the actual value is a block of code that raises an error.&lt;/li>; &lt;li>; &lt;strong>;be_a&lt;/strong>;: This matcher checks if the actual value is an instance of the expected class.&lt;/li>; &lt;li>; &lt;strong>;be_between&lt;/strong>;: This matcher checks if the actual value is a number that is between the two expected values.&lt;/li>; &lt;li>; &lt;strong>;have_key&lt;/strong>;: This matcher checks if the actual value is a hash that has the expected key. &lt;/li>; &lt;/ul>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;creates a user&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;user&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;name: &lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;John&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;age: &lt;/span>;&lt;span class=&quot;mi&quot;>;30&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;be_a&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;eq&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;John&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;age&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;be_between&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;20&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;40&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;inclusive&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;user&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;attributes&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;have_key&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;:name&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, we are creating a new User object and using the be_a matcher to check if it is an instance of the User class. We are also using the eq matcher to check if the name attribute is set to &quot;John&quot;, and the be_between matcher to check if the age attribute is between 20 and 40. Finally, we are using the have_key matcher to check if the attributes hash has a :name key.&lt;/p>; &lt;h2>; RSpec Before and After Hooks &lt;/h2>; &lt;p>;RSpec allows you to define &quot;&lt;strong>;before&lt;/strong>;&quot; and &quot;&lt;strong>;after&lt;/strong>;&quot; hooks that will be run before and after each test case. These hooks can be used to set up and clean up any resources or data that are needed for your tests.&lt;/p>; &lt;p>;Here is an example of how you might use the before and after hooks:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;describe&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;MyTestSuite&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;before&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to run before each test case&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;after&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to run after each test case&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;does something&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# test code goes here&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the code in the before block will be run before each test case in the MyTestSuite suite, and the code in the after block will be run after each test case.&lt;/p>; &lt;h2>; Running RSpec Tests &lt;/h2>; &lt;p>;To run your RSpec tests, you can use the rspec command followed by the path to your test file. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;rspec spec/my_test_file.rb &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will execute all of the test cases in the my_test_file.rb file and print the results to the console.&lt;/p>; &lt;p>;You can also run all of the test files in a certain directory by specifying the path to the directory instead of a specific file. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;rspec spec/ &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will run all of the test files in the &lt;strong>;spec&lt;/strong>; directory and its subdirectories.&lt;/p>; &lt;h2>; RSpec with Ruby on Rails &lt;/h2>; &lt;p>;RSpec can also be used for testing Ruby on Rails applications. In a Rails application, you can use RSpec to write tests for your models, controllers, views, and other components of your application.&lt;/p>; &lt;p>;To use RSpec with Rails, you will need to add the &lt;strong>;rspec-rails&lt;/strong>; gem to your Gemfile and run the rails generate rspec:install command. This will create a new spec directory in your Rails project and generate the necessary configuration files for RSpec.&lt;/p>; &lt;p>;To write a test in RSpec for a Rails application, you can create a new file in the spec directory with a &lt;strong>;_spec.rb&lt;/strong>; suffix. For example, to write a test for a User model, you might create a file called spec/models/user_spec.rb.&lt;/p>; &lt;p>;Here is an example of an RSpec test for a Rails model:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;rails_helper&#39;&lt;/span>; &lt;span class=&quot;no&quot;>;RSpec&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;describe&lt;/span>; &lt;span class=&quot;no&quot;>;User&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;type: :model&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;it&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;has a valid factory&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;expect&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;build&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;:user&lt;/span>;&lt;span class=&quot;p&quot;>;)).&lt;/span>;&lt;span class=&quot;nf&quot;>;to&lt;/span>; &lt;span class=&quot;n&quot;>;be_valid&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, we are using the build method from the FactoryBot library to create a new User object, and then using the be_valid matcher to check if the object is valid according to the model&#39;s validation rules.&lt;/p>; &lt;p>;To run your RSpec tests in a Rails application, you can use the rspec command followed by the path to your test files or directories. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;rspec spec/models &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will run all of the test files in the spec/models directory and its subdirectories.&lt;/p>; &lt;p>;Overall, RSpec is a powerful and flexible testing tool that is well-suited for testing Ruby on Rails applications. By writing and running tests with RSpec, you can ensure that your Rails application is correct, reliable, and maintainable.&lt;/p>; &lt;h2>; Advanced RSpec techniques &lt;/h2>; &lt;p>;Here are some advanced techniques you can use when writing tests with RSpec:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;&lt;strong>;Shared Examples&lt;/strong>;: You can use shared examples to DRY up your test suite. Shared examples allow you to define a set of tests that can be reused in multiple contexts. This is useful when you have similar tests that need to be run for different models or classes.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Custom Matchers&lt;/strong>;: RSpec comes with a number of built-in matchers, but you can also define your own custom matchers to make your tests more expressive. Custom matchers allow you to define your own methods for comparing the expected and actual results of a test.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Mocks and Stubs&lt;/strong>;: Mocks and stubs are test doubles that allow you to control the behavior of an object in a test. You can use them to test how your code interacts with external dependencies, such as a database or a web API.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Testing Private Methods&lt;/strong>;: RSpec has a number of methods and techniques you can use to test private methods in your code. These include using the send method to call private methods, or using the instance_eval method to execute code in the context of an object&#39;s private methods.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In conclusion, RSpec matchers are an important part of the RSpec testing framework. They allow you to define your expectations about the behavior of your code and determine whether those expectations are met. There are a variety of matchers available in RSpec, ranging from simple equality checks to more complex checks for class membership or the presence of certain keys in a hash. By using these matchers effectively, you can write comprehensive and reliable tests for your Ruby code.&lt;/p>;</description><category> ruby</category><category> rails</category><category>测试</category><category>tutorial</category></item><item><title> How to Mitigate the Impact of a DDoS Attack: Strategies and Examples</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Fri, 30 Dec 2022 10:26:39 +0000</pubDate><link/> https://dev.to/sevio/how-to-mitigate-the-impact-of-a-ddos-attack-strategies-and-examples-30cd<guid> https://dev.to/sevio/how-to-mitigate-the-impact-of-a-ddos-attack-strategies-and-examples-30cd</guid><description> &lt;h2>; Intro &lt;/h2>; &lt;p>;A Distributed Denial of Service (DDoS) attack is a type of cyber attack in which a large number of compromised computers, known as a botnet, are used to flood a targeted website or network with traffic in an attempt to overwhelm it and make it unavailable to legitimate users.&lt;/p>; &lt;p>;DDoS attacks can be very disruptive and costly, as they can prevent businesses from providing their services to customers and cause lost revenue. They can also be difficult to defend against, as they often involve a large number of sources generating traffic.&lt;/p>; &lt;p>;There are several strategies that can be used to mitigate the impact of a DDoS attack. Some of these strategies include:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Rate limiting: This involves limiting the number of requests that a server will accept from a single source within a certain time period. This can help to prevent an attacker from overwhelming the server with a large number of requests.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Blacklisting: This involves identifying and blocking &lt;br>; traffic from known malicious sources. This can be done using IP address blacklisting or by analyzing traffic patterns to identify suspicious activity.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Traffic shaping: This involves prioritizing certain types of traffic over others, based on their importance or the likelihood that they are part of a DDoS attack. For example, traffic from legitimate users might be given higher priority than traffic from unknown sources.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Load balancing: This involves distributing incoming traffic across multiple servers, rather than relying on a single server to handle all requests. This can help to reduce the impact of a DDoS attack, as the attacker would need to generate a much larger amount of traffic to overwhelm all of the servers.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Cloud-based DDoS protection: This involves using a cloud-based service to absorb and filter out malicious traffic before it reaches the targeted website or network. This can be an effective way to defend against DDoS attacks, as the cloud provider typically has a much larger capacity to absorb traffic than a single website or network.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;Here is an example of how you might use rate limiting to mitigate the impact of a DDoS attack in Ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set the maximum number of requests allowed per minute&lt;/span>; &lt;span class=&quot;no&quot;>;MAX_REQUESTS_PER_MINUTE&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1000&lt;/span>; &lt;span class=&quot;n&quot;>;before&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# Get the current time&lt;/span>; &lt;span class=&quot;n&quot;>;now&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Time&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;now&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;to_i&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check if the client has made more than the maximum allowed number of requests in the past minute&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;nil?&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the IP address is not available, allow the request to proceed&lt;/span>; &lt;span class=&quot;k&quot;>;return&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;vg&quot;>;$redis&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to_i&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;no&quot;>;MAX_REQUESTS_PER_MINUTE&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the client has exceeded the maximum allowed number of requests, return a 429 Too Many Requests error&lt;/span>; &lt;span class=&quot;n&quot;>;halt&lt;/span>; &lt;span class=&quot;mi&quot;>;429&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Too Many Requests&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Increment the request counter for the client&lt;/span>; &lt;span class=&quot;vg&quot;>;$redis&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;incr&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;vg&quot;>;$redis&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;expire&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;60&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;now&lt;/span>; &lt;span class=&quot;o&quot;>;%&lt;/span>; &lt;span class=&quot;mi&quot;>;60&lt;/span>;&lt;span class=&quot;p&quot;>;))&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Your application code goes here...&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This code uses the before hook in Sinatra to rate limit incoming requests. It checks the number of requests that have been made by the client in the past minute, and if the client has exceeded the maximum allowed number of requests, it returns a 429 Too Many Requests error.&lt;/p>; &lt;p>;By implementing strategies like these, you can help to mitigate the impact of a DDoS attack and protect your website or network from being overwhelmed by malicious traffic.&lt;/p>; &lt;p>;There are several other strategies that can be used to mitigate the impact of a DDoS attack. Here are a few additional strategies that you might consider:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Use a web application firewall (WAF): A WAF is a security solution that sits between your website or application and the internet, and analyzes incoming traffic to detect and block malicious activity. WAFs can be configured to block traffic based on various criteria, such as IP addresses, traffic patterns, or types of attacks.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Use content delivery networks (CDNs): CDNs are networks of servers that are distributed around the world, and are used to deliver web content to users based on their geographic location. By using a CDN, you can offload some of the traffic that would normally be directed to your server, which can help to reduce the impact of a DDoS attack.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Implement security protocols: There are various security protocols that can be used to help protect against DDoS attacks, such as Transport Layer Security (TLS) and Secure Sockets Layer (SSL). By using these protocols, you can encrypt your traffic and make it more difficult for attackers to intercept and manipulate it.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Monitor your network: It is important to regularly monitor your network for signs of a DDoS attack, such as an unusual increase in traffic or a decrease in performance. By identifying an attack early, you can take action to mitigate the impact and prevent it from causing significant disruption.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;Here is an example of how you might use a CDN to mitigate the impact of a DDoS attack in Ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;rack/contrib/try_static&#39;&lt;/span>; &lt;span class=&quot;n&quot;>;use&lt;/span>; &lt;span class=&quot;no&quot;>;Rack&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;TryStatic&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;root: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;public&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;urls: &lt;/span>;&lt;span class=&quot;sx&quot;>;%w[/]&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;try: &lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;.html&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;index.html&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;/index.html&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Your application code goes here...&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This code uses the Rack::TryStatic middleware to serve static content from the public directory. If a request is made for a static file that exists in the public directory (eg an HTML, CSS, or JavaScript file), the middleware will serve the file directly, rather than routing the request to your application. This can help to reduce the load on your application and mitigate the impact of a DDoS attack.&lt;/p>; &lt;p>;By implementing strategies like these, you can help to protect your website or network from DDoS attacks and ensure that it remains available to legitimate users.&lt;/p>; &lt;p>;Here are a few additional examples of how you might use different strategies to mitigate the impact of a DDoS attack:&lt;/p>; &lt;h2>; Blacklisting &lt;/h2>; &lt;p>;You can use blacklisting to block traffic from known malicious sources. For example, you might use the ipban gem in Ruby to block traffic from IP addresses that have been flagged as malicious:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;ipban&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set the maximum number of failed login attempts allowed from a single IP address&lt;/span>; &lt;span class=&quot;no&quot;>;MAX_FAILED_LOGIN_ATTEMPTS&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;5&lt;/span>; &lt;span class=&quot;n&quot;>;post&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;/login&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check if the IP address has exceeded the maximum allowed number of failed login attempts&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;vg&quot;>;$redis&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to_i&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;no&quot;>;MAX_FAILED_LOGIN_ATTEMPTS&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the IP address has exceeded the maximum allowed number of failed login attempts, block the IP address&lt;/span>; &lt;span class=&quot;no&quot;>;Ipban&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;block&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;request&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;ip&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;halt&lt;/span>; &lt;span class=&quot;mi&quot;>;403&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Access Denied&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Attempt to log in&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the login fails, increment the failed login counter for the IP address&lt;/span>; &lt;span class=&quot;c1&quot;>;# If the login succeeds, reset the failed login counter for the IP address&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the Ipban.block method is used to block traffic from an IP address that has exceeded the maximum allowed number of failed login attempts. This can help to prevent an attacker from repeatedly attempting to guess a user&#39;s login credentials.&lt;/p>; &lt;h2>; Traffic shaping &lt;/h2>; &lt;p>;You can use traffic shaping to prioritize certain types of traffic over others. For example, you might use the sinatra-priority gem in Ruby to give higher priority to traffic from authenticated users:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra/priority&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set the priority levels for different types of traffic&lt;/span>; &lt;span class=&quot;n&quot;>;priority&lt;/span>; &lt;span class=&quot;ss&quot;>;:high&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;authenticated?&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;priority&lt;/span>; &lt;span class=&quot;ss&quot;>;:low&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;o&quot;>;!&lt;/span>;&lt;span class=&quot;n&quot;>;authenticated?&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;get&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;/&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;c1&quot;>;# This route will be given high priority if the user is authenticated, and low priority if the user is not authenticated&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Welcome to the website!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the authenticated? method is used to determine the priority level for incoming traffic. Traffic from authenticated users will be given high priority, while traffic from non-authenticated users will be given low priority. This can help to ensure that traffic from legitimate users is processed more quickly, even in the event of a DDoS attack.&lt;/p>; &lt;h2>; Load balancing &lt;/h2>; &lt;p>;You can use load balancing to distribute incoming traffic across multiple servers, rather than relying on a single server to handle all requests. For example, you might use the sinatra-contrib gem in Ruby to enable load balancing with the Rack::LoadBalancer middleware:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;sinatra/contrib&#39;&lt;/span>; &lt;span class=&quot;n&quot;>;use&lt;/span>; &lt;span class=&quot;no&quot;>;Rack&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;LoadBalancer&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;balancers: &lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;name: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;app1&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;host: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;127.0.0.1&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;port: &lt;/span>;&lt;span class=&quot;mi&quot;>;4567&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;weight: &lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;p&quot;>;},&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;name: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;app2&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;host: &lt;/span>;&lt;span class=&quot;s1&quot;>;&#39;127.0.0.1&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;port: &lt;/span>;&lt;span class=&quot;mi&quot;>;4568&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;weight: &lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# Your application code goes here...&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the Rack::LoadBalancer middleware is used to distribute incoming traffic between two servers (app1 and app2). The weight attribute of each server determines the proportion of traffic that will be directed to each server. For example, if both servers have a weight of 1, incoming traffic will be evenly distributed between them.&lt;/p>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In conclusion, a Distributed Denial of Service (DDoS) attack is a type of cyber attack that involves flooding a targeted website or network with traffic in an attempt to overwhelm it and make it unavailable to legitimate users. DDoS attacks can be very disruptive and costly, and they can be difficult to defend against due to the large number of sources generating traffic.&lt;/p>; &lt;p>;There are several strategies that can be used to mitigate the impact of a DDoS attack, including rate limiting, blacklisting, traffic shaping, load balancing, and using a cloud-based DDoS protection service. It is also important to consider using a web application firewall (WAF), content delivery networks (CDNs), security protocols, and monitoring your network to detect and respond to DDoS attacks.&lt;/p>; &lt;p>;By implementing these strategies and keeping your website or network up to date with the latest security measures, you can help to protect your business from DDoS attacks and ensure that your services remain available to your customers.&lt;/p>;</description><category> ruby</category><category> devops</category></item><item><title> Performance of Exception Handling in Ruby</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Wed, 28 Dec 2022 15:56:39 +0000</pubDate><link/> https://dev.to/daviducolo/performance-of-exception-handling-in-ruby-44ic<guid> https://dev.to/daviducolo/performance-of-exception-handling-in-ruby-44ic</guid><description> &lt;h2>; Intro &lt;/h2>; &lt;p>;One of Ruby&#39;s key features is its exception handling mechanism, which allows developers to handle errors and exceptions in a clean and organized manner. However, using exceptions for error handling can have a negative impact on the performance of a Ruby application, especially if they are used excessively or inappropriately. In this article, we will examine the performance implications of using exceptions in Ruby and discuss some best practices for minimizing their impact on your application&#39;s performance.&lt;/p>; &lt;h2>; How exceptions work in Ruby &lt;/h2>; &lt;p>;In Ruby, exceptions are objects that represent an error or exceptional condition that occurs during the execution of a program. When an exception is raised, it is propagated up the call stack until it is caught and handled by an appropriate exception handler. If no exception handler is found, the program will terminate with an unhandled exception error.&lt;/p>; &lt;p>;Exceptions are raised using the raise keyword, which takes an optional message argument and an optional exception class argument. For example, the following code raises a &lt;strong>;RuntimeError&lt;/strong>; with the message &quot;Something went wrong&quot;:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Something went wrong&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;You can also raise a specific exception class, such as ArgumentError:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ArgumentError&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Invalid argument&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;To handle exceptions, you can use the begin-rescue-end block, which allows you to specify a block of code that may raise an exception and a block of code that will handle the exception if it is raised. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;begin&lt;/span>; &lt;span class=&quot;c1&quot;>;# code that may raise an exception&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to handle the exception&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;You can also specify a specific exception class or multiple exception classes to rescue:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;begin&lt;/span>; &lt;span class=&quot;c1&quot;>;# code that may raise an exception&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;no&quot;>;StandardError&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to handle StandardError and its subclasses&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;no&quot;>;ArgumentError&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to handle ArgumentError and its subclasses&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Finally, you can use the ensure keyword to specify a block of code that will always be executed, regardless of whether an exception is raised or not:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;begin&lt;/span>; &lt;span class=&quot;c1&quot;>;# code that may raise an exception&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;c1&quot;>;# code to handle the exception&lt;/span>; &lt;span class=&quot;k&quot;>;ensure&lt;/span>; &lt;span class=&quot;c1&quot;>;# code that will always be executed&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Performance implications of exceptions &lt;/h2>; &lt;p>;Using exceptions for error handling can have a significant impact on the performance of a Ruby application, especially if they are used excessively or inappropriately. This is because raising and handling exceptions involves a significant amount of overhead, including creating and manipulating exception objects, unwinding the call stack, and executing exception handling code.&lt;/p>; &lt;p>;Here are some ways in which the use of exceptions can affect the performance of a Ruby application:&lt;/p>; &lt;ul>; &lt;li>;&lt;p>;&lt;strong>;Object creation overhead&lt;/strong>;: Every time an exception is raised, a new exception object is created and initialized with the appropriate message and exception class. This involves allocating memory and initializing the object, which can be expensive, especially if the exception is raised frequently.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Unwinding the call stack&lt;/strong>;: When an exception is raised, the interpreter must unwind the call stack to find the appropriate exception handler. This involves traversing the call stack and checking each frame for an exception handler, which can be time-consuming and add significant overhead to the program.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Exception handling code&lt;/strong>;: The code in the rescue block is executed every time an exception is raised and handled, which can add additional overhead to the program. If the exception handling code is complex or performs a lot of computations, it can further degrade the performance of the application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Increased memory usage&lt;/strong>;: Exceptions use more memory than traditional error handling mechanisms, such as returning error codes or using nil values to indicate an error. This is because exception objects are created and stored on the call stack, which can lead to increased memory usage and slower garbage collection.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Slower code execution&lt;/strong>;: The overhead associated with raising and handling exceptions can slow down the overall execution of the program. This is especially noticeable in tight loops or in code that is called frequently.&lt;/p>;&lt;/li>; &lt;/ul>; &lt;p>;To minimize the performance impact of exceptions in your Ruby application, it is important to use them appropriately and only when necessary. Here are some best practices for using exceptions in Ruby:&lt;/p>; &lt;ul>; &lt;li>;&lt;p>;&lt;strong>;Use exceptions for exceptional situations&lt;/strong>;: Exceptions should be used to handle truly exceptional situations, such as unexpected input, system failures, or other conditions that cannot be handled in a normal way. Do not use exceptions for control flow or as a substitute for traditional error handling mechanisms.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Avoid raising and handling exceptions in tight loops&lt;/strong>;: Avoid raising and handling exceptions in tight loops or in code that is called frequently. This can significantly degrade the performance of the application.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Use specific exception classes&lt;/strong>;: Use specific exception classes, rather than the generic StandardError class, to clearly communicate the nature of the error and make it easier to handle.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Avoid rescuing Exception&lt;/strong>;: Do not rescue the Exception class, as this will catch all exceptions, including those that should not be handled, such as Interrupt and SystemExit. Instead, rescue specific exception classes or use a more general class, such as StandardError, which does not catch system-level exceptions.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;&lt;strong>;Consider using other error handling mechanisms&lt;/strong>;: In some cases, it may be more appropriate to use other error handling mechanisms, such as returning error codes or using nil values to indicate an error. This can be more efficient than using exceptions, especially in cases where the error handling code is called frequently or the overhead of raising and handling exceptions is significant.&lt;/p>;&lt;/li>; &lt;/ul>; &lt;h2>; Benchmark &lt;/h2>; &lt;p>;Here is a simple benchmark example that compares the performance of using exceptions versus traditional error handling mechanisms in Ruby:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;benchmark&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Traditional error handling using return codes&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;divide_using_return_codes&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;return&lt;/span>; &lt;span class=&quot;kp&quot;>;nil&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;o&quot;>;/&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Exception-based error handling&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;divide_using_exceptions&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;raise&lt;/span>; &lt;span class=&quot;no&quot;>;ZeroDivisionError&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;o&quot;>;/&lt;/span>; &lt;span class=&quot;n&quot;>;y&lt;/span>; &lt;span class=&quot;k&quot;>;rescue&lt;/span>; &lt;span class=&quot;no&quot;>;ZeroDivisionError&lt;/span>; &lt;span class=&quot;kp&quot;>;nil&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;c1&quot;>;# Benchmark the two methods&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;1_000_000&lt;/span>; &lt;span class=&quot;no&quot;>;Benchmark&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bm&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;bm&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;bm&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;report&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;return codes&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;times&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;divide_using_return_codes&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;bm&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;report&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;exceptions&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;times&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;n&quot;>;divide_using_exceptions&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight shell&quot;>;&lt;code>; user system total real &lt;span class=&quot;k&quot;>;return &lt;/span>;codes 0.044149 0.000053 0.044202 &lt;span class=&quot;o&quot;>;(&lt;/span>; 0.044223&lt;span class=&quot;o&quot;>;)&lt;/span>; exceptions 0.508261 0.011618 0.519879 &lt;span class=&quot;o&quot;>;(&lt;/span>; 0.520129&lt;span class=&quot;o&quot;>;)&lt;/span>; &lt;span class=&quot;o&quot;>;=&amp;gt;&lt;/span>; &lt;span class=&quot;o&quot;>;[&lt;/span>;&lt;span class=&quot;c&quot;>;#&amp;lt;Benchmark::Tms:0x000000014106b598&lt;/span>; @cstime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.0, @cutime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.0, @label&lt;span class=&quot;o&quot;>;=&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;return codes&quot;&lt;/span>;, @real&lt;span class=&quot;o&quot;>;=&lt;/span>;0.04422300006262958, @stime&lt;span class=&quot;o&quot;>;=&lt;/span>;5.2999999999997494e-05, @total&lt;span class=&quot;o&quot;>;=&lt;/span>;0.04420199999999999, @utime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.044148999999999994&amp;gt;, &lt;span class=&quot;c&quot;>;#&amp;lt;Benchmark::Tms:0x000000015486d8f0&lt;/span>; @cstime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.0, @cutime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.0, @label&lt;span class=&quot;o&quot;>;=&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;exceptions&quot;&lt;/span>;, @real&lt;span class=&quot;o&quot;>;=&lt;/span>;0.5201290000695735, @stime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.011618000000000003, @total&lt;span class=&quot;o&quot;>;=&lt;/span>;0.5198790000000001, @utime&lt;span class=&quot;o&quot;>;=&lt;/span>;0.5082610000000001&amp;gt;] &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;&lt;em>;Apple Mac Book Pro 13-inch, M1, 2020 16GB RAM&lt;/em>;&lt;/p>; &lt;p>;The output of the benchmark will show the elapsed time for each method, allowing you to compare the performance of the two approaches. You can also modify the benchmark to test different scenarios, such as handling different types of errors or handling errors in tight loops.&lt;/p>; &lt;p>;Keep in mind that the performance implications of using exceptions will vary depending on the specific use case and the complexity of the error handling code. It is always a good idea to benchmark and profile your code to determine the most appropriate error handling mechanism for your specific needs.&lt;/p>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;Exceptions are a powerful and useful tool for handling errors and exceptional situations in Ruby. However, it is important to use them appropriately to avoid degrading the performance of your application. By following best practices and using exceptions only when necessary, you can ensure that your application runs smoothly and efficiently.&lt;/p>;</description><category> ruby</category><category> performance</category><category> programming</category></item><item><title> Stock prediction algorithm in Python</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Wed, 28 Dec 2022 09:05:24 +0000</pubDate><link/> https://dev.to/daviducolo/stock-prediction-algorithm-in-python-3cmb<guid> https://dev.to/daviducolo/stock-prediction-algorithm-in-python-3cmb</guid><description> &lt;p>;To create a stock prediction algorithm in Python, you will need to follow these steps:&lt;/p>; &lt;ol>; &lt;li>;&lt;p>;Collect historical data for the stock you want to predict. You can use a financial API or web scraping to get this data. Make sure to get data for multiple years, as it will be used to train the prediction model.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Preprocess the data by cleaning and organizing it. This may include removing missing values, handling outliers, and converting the data into a format that is suitable for modeling.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Split the data into training and testing sets. The training set will be used to train the prediction model, while the testing set will be used to evaluate the model&#39;s performance.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Choose a prediction model and train it on the training data. There are many different models you can use for stock prediction, such as linear regression, decision trees, and support vector machines.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Test the model on the testing data and evaluate its performance. You can use metrics such as mean absolute error (MAE) and root mean squared error (RMSE) to measure the model&#39;s accuracy.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Fine-tune the model by adjusting its hyperparameters and/or using different model architectures.&lt;/p>;&lt;/li>; &lt;li>;&lt;p>;Use the trained model to make predictions on unseen data, such as future stock prices.&lt;/p>;&lt;/li>; &lt;/ol>; &lt;p>;It&#39;s worth noting that stock prediction is a challenging task, and it&#39;s difficult to achieve high accuracy. There are many factors that can influence stock prices, and it&#39;s hard to account for all of them in a predictive model. As such, it&#39;s important to be cautious when interpreting the results of your predictions.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight python&quot;>;&lt;code>;&lt;span class=&quot;kn&quot;>;import&lt;/span>; &lt;span class=&quot;nn&quot;>;pandas&lt;/span>; &lt;span class=&quot;k&quot;>;as&lt;/span>; &lt;span class=&quot;n&quot;>;pd&lt;/span>; &lt;span class=&quot;kn&quot;>;import&lt;/span>; &lt;span class=&quot;nn&quot;>;numpy&lt;/span>; &lt;span class=&quot;k&quot;>;as&lt;/span>; &lt;span class=&quot;n&quot;>;np&lt;/span>; &lt;span class=&quot;c1&quot;>;# Load the data &lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;pd&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;read_csv&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;stock_data.csv&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Preprocess the data &lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;dropna&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;inplace&lt;/span>;&lt;span class=&quot;o&quot;>;=&lt;/span>;&lt;span class=&quot;bp&quot;>;True&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Remove rows with missing values &lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Close&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Remove rows with invalid close price &lt;/span>; &lt;span class=&quot;c1&quot;>;# Split the data into training and testing sets &lt;/span>;&lt;span class=&quot;n&quot;>;train_data&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Date&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;2020-01-01&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;test_data&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;df&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Date&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;gt;=&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;2020-01-01&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;c1&quot;>;# Choose a prediction model &lt;/span>;&lt;span class=&quot;n&quot;>;model&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;LinearRegression&lt;/span>;&lt;span class=&quot;p&quot;>;()&lt;/span>; &lt;span class=&quot;c1&quot;>;# Train the model on the training data &lt;/span>;&lt;span class=&quot;n&quot;>;X_train&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;train_data&lt;/span>;&lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Open&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;High&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;Low&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;Volume&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;n&quot;>;y_train&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;train_data&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Close&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;fit&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;X_train&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;y_train&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Test the model on the testing data &lt;/span>;&lt;span class=&quot;n&quot;>;X_test&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;test_data&lt;/span>;&lt;span class=&quot;p&quot;>;[[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Open&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;High&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;Low&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;s&quot;>;&#39;Volume&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]]&lt;/span>; &lt;span class=&quot;n&quot;>;y_test&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;test_data&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Close&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;predictions&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;predict&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;X_test&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Evaluate the model&#39;s performance &lt;/span>;&lt;span class=&quot;n&quot;>;mae&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;mean_absolute_error&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;y_test&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;predictions&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;rmse&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;np&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;sqrt&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;mean_squared_error&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;y_test&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;predictions&lt;/span>;&lt;span class=&quot;p&quot;>;))&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;MAE: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;mae&lt;/span>;&lt;span class=&quot;si&quot;>;:&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;n&quot;>;f&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;RMSE: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;rmse&lt;/span>;&lt;span class=&quot;si&quot;>;:&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;n&quot;>;f&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Fine-tune the model (optional) # ... &lt;/span>; &lt;span class=&quot;c1&quot;>;# Make predictions on unseen data # ... &lt;/span>;&lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This code assumes that you have a stock_data.csv file that contains the historical stock data, and that the data includes columns for the open price, high price, low price, volume, and close price. The code preprocesses the data by removing missing values and rows with invalid close prices, and then splits the data into training and testing sets. The code then trains a linear regression model on the training data, tests the model on the testing data, and evaluates the model&#39;s performance using the mean absolute error (MAE) and root mean squared error (RMSE). Finally, the code shows how you could fine-tune the model (optional) and make predictions on unseen data.&lt;/p>; &lt;p>;Here is an example of what the stock_data.csv file could look like:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight plaintext&quot;>;&lt;code>;Date,Open,High,Low,Close,Volume 2020-01-02,148.25,150.62,146.87,150.06,20768456 2020-01-03,150.01,151.44,149.56,150.47,19819854 2020-01-06,150.72,152.43,149.57,151.5,23793456 2020-01-07,151.5,152.44,150.49,151.74,26989857 2020-01-08,151.7,152.92,150.9,152.09,22369456 2020-01-09,152.31,153.72,152.01,153.61,23445678 ... &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This file contains daily stock data for a single company, with one row per day. The columns are:&lt;/p>; &lt;p>;&lt;strong>;Date&lt;/strong>;: the date of the stock data&lt;br>; &lt;strong>;Open&lt;/strong>;: the open price of the stock on that day&lt;br>; &lt;strong>;High&lt;/strong>;: the highest price of the stock on that day&lt;br>; &lt;strong>;Low&lt;/strong>;: the lowest price of the stock on that day&lt;br>; &lt;strong>;Close&lt;/strong>;: the close price of the stock on that day&lt;br>; &lt;strong>;Volume&lt;/strong>;: the number of shares traded on that day&lt;/p>; &lt;p>;You may also have additional columns, depending on the data you have available and the needs of your prediction model.&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight python&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Test the model on a single example &lt;/span>;&lt;span class=&quot;n&quot;>;example_input&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;np&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;([&lt;/span>;&lt;span class=&quot;mf&quot;>;150.01&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;151.44&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;149.56&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;19819854&lt;/span>;&lt;span class=&quot;p&quot;>;]).&lt;/span>;&lt;span class=&quot;n&quot;>;reshape&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;prediction&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;predict&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;example_input&lt;/span>;&lt;span class=&quot;p&quot;>;)[&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Prediction for input &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;example_input&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;prediction&lt;/span>;&lt;span class=&quot;si&quot;>;:&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;n&quot;>;f&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Test the model on multiple examples &lt;/span>;&lt;span class=&quot;n&quot;>;test_inputs&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;np&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;([&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mf&quot;>;148.25&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;150.62&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;146.87&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;20768456&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mf&quot;>;152.31&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;153.72&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;152.01&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;23445678&lt;/span>;&lt;span class=&quot;p&quot;>;],&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mf&quot;>;149.06&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;149.40&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mf&quot;>;148.46&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;15423456&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;p&quot;>;])&lt;/span>; &lt;span class=&quot;n&quot;>;predictions&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;predict&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;test_inputs&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Predictions for inputs &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;test_inputs&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;predictions&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Test the model on the entire testing set &lt;/span>;&lt;span class=&quot;n&quot;>;predictions&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;model&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;n&quot;>;predict&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;X_test&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;print&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;sa&quot;>;f&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;Predictions for entire test set: &lt;/span>;&lt;span class=&quot;si&quot;>;{&lt;/span>;&lt;span class=&quot;n&quot;>;predictions&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s&quot;>;&#39;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This code shows how you can test your model on a single example, multiple examples, and the entire testing set. For each test, the code prints the predictions made by the model. You can then compare the predictions to the actual stock prices to see how well the model is performing.&lt;/p>;</description><category> python</category><category> machinelearning</category><category> tutorial</category></item><item><title> Geocoding with Ruby</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Thu, 22 Dec 2022 16:17:50 +0000</pubDate><link/> https://dev.to/daviducolo/geocoding-with-ruby-4229<guid> https://dev.to/daviducolo/geocoding-with-ruby-4229</guid><description> &lt;p>;Geocoding is the process of converting addresses or place names into geographical coordinates, such as latitude and longitude. These coordinates can then be used to place markers on a map, or to perform other spatial operations.&lt;/p>; &lt;p>;In this article, we will explore how to perform geocoding using the Ruby programming language. We will cover several different approaches, including using the geocoder gem, the Google Maps API, and the Mapbox API.&lt;/p>; &lt;h2>; Using the geocoder gem &lt;/h2>; &lt;p>;The geocoder gem is a popular Ruby gem that provides a simple interface for geocoding and reverse geocoding (converting coordinates to addresses). It supports a variety of geocoding providers, including Google Maps, Bing Maps, and OpenStreetMap.&lt;/p>; &lt;p>;To use the geocoder gem, you will need to install it first. Open a terminal and enter the following command:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;gem&lt;/span>; &lt;span class=&quot;n&quot;>;install&lt;/span>; &lt;span class=&quot;n&quot;>;geocoder&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;Once the gem is installed, you can use it in your Ruby code by requiring it and creating a new instance of the Geocoder class. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;geocoder&#39;&lt;/span>; &lt;span class=&quot;n&quot;>;geocoder&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Geocoder&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;To perform a geocoding query, you can call the geocode method on the geocoder object, passing in the address or place name that you want to geocode. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;geocoder&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;geocode&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;1600 Amphitheatre Parkway, Mountain View, CA&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;success?&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Latitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;latitude&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Longitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;longitude&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;message&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;This will output the latitude and longitude of the specified address. If the geocoding query fails, it will output an error message.&lt;/p>; &lt;p>;You can also use the &lt;strong>;reverse_geocode&lt;/strong>; method to convert coordinates to an address. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;geocoder&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;reverse_geocode&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mf&quot;>;37.423021&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;o&quot;>;-&lt;/span>;&lt;span class=&quot;mf&quot;>;122.083739&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;success?&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Address: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;address&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Reverse geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;message&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Using the Google Maps API &lt;/h2>; &lt;p>;Another option for geocoding with Ruby is to use the Google Maps API. This requires creating a Google Maps API key and making HTTP requests to the API&#39;s geocoding endpoint.&lt;/p>; &lt;p>;To get started, you will need to sign up for a Google Cloud account and enable the Google Maps API. You can then create an API key in the Google Cloud Console.&lt;/p>; &lt;p>;Once you have an API key, you can use it to make geocoding requests in Ruby using the Net::HTTP class. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;net/http&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;uri&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Replace YOUR_API_KEY with your actual API key&lt;/span>; &lt;span class=&quot;n&quot;>;api_key&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;YOUR_API_KEY&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set up the URL for the geocoding request&lt;/span>; &lt;span class=&quot;n&quot;>;url&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;URI&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&amp;amp;key=&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;api_key&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Make the request and parse the response&lt;/span>; &lt;span class=&quot;n&quot;>;response&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Net&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;HTTP&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;url&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;JSON&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;parse&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;response&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;To parse the response and extract the latitude and longitude, you can use the following code:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Check the status code to make sure the request was successful&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;status&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;OK&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Extract the latitude and longitude from the first result&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;results&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;lat&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;geometry&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;location&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;lat&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;lng&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;geometry&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;location&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;lng&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Latitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;lat&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Longitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;lng&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;status&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;You can also perform reverse geocoding using the Google Maps API by making a request to the reverseGeocode endpoint and passing in the latitude and longitude coordinates. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Set up the URL for the reverse geocoding request&lt;/span>; &lt;span class=&quot;n&quot;>;url&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;URI&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;https://maps.googleapis.com/maps/api/geocode/json?latlng=37.423021,-122.083739&amp;amp;key=&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;api_key&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Make the request and parse the response&lt;/span>; &lt;span class=&quot;n&quot;>;response&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Net&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;HTTP&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;url&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;JSON&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;parse&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;response&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check the status code to make sure the request was successful&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;status&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;OK&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Extract the formatted address from the first result&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;results&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;address&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;formatted_address&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Address: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;address&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Reverse geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;status&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Using the Mapbox API &lt;/h2>; &lt;p>;Mapbox is another popular mapping platform that provides a geocoding API. Like the Google Maps API, it requires creating an API key and making HTTP requests to its geocoding endpoint.&lt;/p>; &lt;p>;To get started with the Mapbox API, you will need to sign up for a Mapbox account and create an API key. Once you have an API key, you can use it to make geocoding requests in Ruby using the Net::HTTP class.&lt;/p>; &lt;p>;For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;net/http&#39;&lt;/span>; &lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;uri&#39;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Replace YOUR_API_KEY with your actual API key&lt;/span>; &lt;span class=&quot;n&quot;>;api_key&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;YOUR_API_KEY&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Set up the URL for the geocoding request&lt;/span>; &lt;span class=&quot;n&quot;>;url&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;URI&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;https://api.mapbox.com/geocoding/v5/mapbox.places/1600+Amphitheatre+Parkway,+Mountain+View,+CA.json?access_token=&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;api_key&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Make the request and parse the response&lt;/span>; &lt;span class=&quot;n&quot;>;response&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Net&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;HTTP&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;url&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;JSON&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;parse&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;response&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check the status code to make sure the request was successful&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;code&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Ok&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Extract the latitude and longitude from the first result&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;features&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;lat&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;center&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;lng&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;center&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Latitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;lat&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Longitude: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;lng&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;message&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;You can also perform reverse geocoding using the Mapbox API by making a request to the reverse endpoint and passing in the latitude and longitude coordinates. For example:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;c1&quot;>;# Set up the URL for the reverse geocoding request&lt;/span>; &lt;span class=&quot;n&quot;>;url&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;URI&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;https://api.mapbox.com/geocoding/v5/mapbox.places/37.423021,-122.083739.json?access_token=&lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;api_key&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Make the request and parse the response&lt;/span>; &lt;span class=&quot;n&quot;>;response&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Net&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;HTTP&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;get&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;url&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;JSON&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;parse&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;response&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# Check the status code to make sure the request was successful&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;code&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Ok&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# Extract the formatted address from the first result&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;features&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;][&lt;/span>;&lt;span class=&quot;mi&quot;>;0&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;address&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;result&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;place_name&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Address: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;address&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Reverse geocoding failed: &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;json&lt;/span>;&lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;message&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; Conclusion &lt;/h2>; &lt;p>;In this article, we have explored how to perform geocoding with Ruby using the geocoder gem, the Google Maps API, and the Mapbox API. Each of these approaches has its own strengths and limitations, and you can choose the one that best fits your needs.&lt;/p>; &lt;p>;Whether you are building a mapping application, a location-based service, or just need to convert addresses to coordinates for some other purpose, geocoding is a valuable tool that can help you work with geographical data in your Ruby projects.&lt;/p>;</description><category> ruby</category><category> tutorial</category></item><item><title> 10 (advanced) Ruby Interview Question</title><dc:creator> Davide Santangelo</dc:creator><pubDate> Tue, 20 Dec 2022 09:12:55 +0000</pubDate><link/> https://dev.to/daviducolo/10-advanced-ruby-interview-question-3ba5<guid> https://dev.to/daviducolo/10-advanced-ruby-interview-question-3ba5</guid><description> &lt;h2>; [1] What is a singleton method in Ruby and how do you define one? &lt;/h2>; &lt;p>;A singleton method is a method that is defined on a single instance of an object, rather than on the object&#39;s class as a whole. To define a singleton method, you use the define_singleton_method method and pass it the method name and a block of code that defines the method&#39;s behavior. Here is an example of defining a singleton method:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Fido&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nc&quot;>;dog&lt;/span>;&lt;span class=&quot;o&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Woof!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Woof!&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [2] What is metaprogramming in Ruby and how does it work? &lt;/h2>; &lt;p>;Metaprogramming in Ruby refers to the ability to write code that can generate or modify other code at runtime. This is achieved through the use of various metaprogramming techniques such as method_missing, define_method, and eval. Here is an example of using the define_method method to define a new method at runtime:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nc&quot;>;self&lt;/span>;&lt;span class=&quot;o&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;define_bark&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;breed&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;define_method&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;ss&quot;>;:bark&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;do&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Woof! I am a &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;breed&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;.&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;define_bark&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Labrador&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Woof! I am a Labrador.&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [3] What is a module in Ruby and how do you use them? &lt;/h2>; &lt;p>;A module in Ruby is a collection of methods and constants that can be included in a class. Modules are used to provide additional functionality to a class without the need for inheritance. To include a module in a class, you use the include keyword followed by the module name. Here is an example of using a module:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;module&lt;/span>; &lt;span class=&quot;nn&quot;>;Barkable&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Woof!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;kp&quot;>;include&lt;/span>; &lt;span class=&quot;no&quot;>;Barkable&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Woof!&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [4] How do you implement the observer pattern in Ruby? &lt;/h2>; &lt;p>;The observer pattern is a design pattern in which an object (the subject) maintains a list of dependencies (observers) and notifies them when its state changes. To implement the observer pattern in Ruby, you can use the Observer library, which provides a set of classes and methods for creating observers and subjects. Here is an example of using the Observer library:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;require&lt;/span>; &lt;span class=&quot;s1&quot;>;&#39;observer&#39;&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;kp&quot;>;include&lt;/span>; &lt;span class=&quot;no&quot;>;Observable&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;n&quot;>;changed&lt;/span>; &lt;span class=&quot;n&quot;>;notify_observers&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;barking&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Owner&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;update&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;event&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Dog is &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;n&quot;>;event&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;.&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;owner&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Owner&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;add_observer&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;owner&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Dog is barking.&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [5] What is the difference between a class variable and a class instance variable in Ruby? &lt;/h2>; &lt;p>;A class variable in Ruby is a variable that is shared among all instances of a class. It is defined with the @@ symbol and is available to all methods of the class. Here is an example of using a class variable:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;vc&quot;>;@@num_dogs&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>; &lt;span class=&quot;vc&quot;>;@@num_dogs&lt;/span>; &lt;span class=&quot;o&quot;>;+=&lt;/span>; &lt;span class=&quot;mi&quot;>;1&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nc&quot;>;self&lt;/span>;&lt;span class=&quot;o&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;num_dogs&lt;/span>; &lt;span class=&quot;vc&quot;>;@@num_dogs&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog1&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog2&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;num_dogs&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs 2&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;A class instance variable, on the other hand, is a variable that is specific to a particular instance of a class. It is defined with the @ symbol and is only available to the instance&#39;s methods. Here is an example of using a class instance variable:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;initialize&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;nb&quot;>;name&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;vi&quot;>;@name&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;nb&quot;>;name&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Hello, my name is &lt;/span>;&lt;span class=&quot;si&quot;>;#{&lt;/span>;&lt;span class=&quot;vi&quot;>;@name&lt;/span>;&lt;span class=&quot;si&quot;>;}&lt;/span>;&lt;span class=&quot;s2&quot;>;!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog1&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Fido&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;dog1&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Hello, my name is Fido!&quot;&lt;/span>; &lt;span class=&quot;n&quot;>;dog2&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;s2&quot;>;&quot;Buddy&quot;&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;n&quot;>;dog2&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;greet&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Hello, my name is Buddy!&quot;&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [6] What is the difference between the freeze and seal methods in Ruby? &lt;/h2>; &lt;p>;The freeze method in Ruby is used to prevent an object from being modified. Once an object is frozen, any attempts to modify it will raise a RuntimeError. The seal method, on the other hand, is used to prevent an object from being modified or extended. It can be thought of as a stricter version of the freeze method. Here is an example of using the freeze and seal methods:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;string&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;hello&quot;&lt;/span>; &lt;span class=&quot;n&quot;>;string&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;freeze&lt;/span>; &lt;span class=&quot;n&quot;>;string&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot; world&quot;&lt;/span>; &lt;span class=&quot;c1&quot;>;# raises a RuntimeError&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;seal&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;lt;&amp;lt;&lt;/span>; &lt;span class=&quot;mi&quot;>;4&lt;/span>; &lt;span class=&quot;c1&quot;>;# raises a RuntimeError&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [7] What is the difference between a lazy enumerator and a regular enumerator in Ruby? &lt;/h2>; &lt;p>;A lazy enumerator in Ruby is an enumerator that generates its values on demand, rather than generating all of the values upfront. This can be useful for working with large datasets or when only a subset of the values is needed. A regular enumerator, on the other hand, generates all of the values upfront. To create a lazy enumerator in Ruby, you can use the lazy method of the Enumerator class. Here is an example of using a lazy enumerator:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;lazy_enumerator&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;o&quot;>;..&lt;/span>;&lt;span class=&quot;no&quot;>;Float&lt;/span>;&lt;span class=&quot;o&quot;>;::&lt;/span>;&lt;span class=&quot;no&quot;>;INFINITY&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;lazy&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;select&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;n&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;n&lt;/span>; &lt;span class=&quot;o&quot;>;%&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;mi&quot;>;0&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;n&quot;>;lazy_enumerator&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;take&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;5&lt;/span>;&lt;span class=&quot;p&quot;>;).&lt;/span>;&lt;span class=&quot;nf&quot;>;to_a&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs [2, 4, 6, 8, 10]&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [8] What is a method_missing in Ruby and how do you use it? &lt;/h2>; &lt;p>;The method_missing method in Ruby is a special method that is called when a method is called on an object that does not exist. It allows you to define a custom behavior for handling missing methods. To use method_missing, you define a method_missing method in your class and use the super keyword to call the original method_missing method. Here is an example of using method_missing:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;k&quot;>;class&lt;/span>; &lt;span class=&quot;nc&quot;>;Dog&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Woof!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;def&lt;/span>; &lt;span class=&quot;nf&quot;>;method_missing&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;method_name&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>;&lt;span class=&quot;n&quot;>;arguments&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;o&quot;>;&amp;amp;&lt;/span>;&lt;span class=&quot;n&quot;>;block&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;k&quot;>;if&lt;/span>; &lt;span class=&quot;n&quot;>;method_name&lt;/span>; &lt;span class=&quot;o&quot;>;==&lt;/span>; &lt;span class=&quot;ss&quot;>;:fetch&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;s2&quot;>;&quot;Fetching the ball!&quot;&lt;/span>; &lt;span class=&quot;k&quot;>;else&lt;/span>; &lt;span class=&quot;k&quot;>;super&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;k&quot;>;end&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;no&quot;>;Dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;new&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;bark&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Woof!&quot;&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;fetch&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs &quot;Fetching the ball!&quot;&lt;/span>; &lt;span class=&quot;n&quot;>;dog&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;sit&lt;/span>; &lt;span class=&quot;c1&quot;>;# raises a NoMethodError&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;p>;In this example, the method_missing method is used to handle the fetch method if it is called on the dog object. If the method is not fetch, the super keyword is used to call the original method_missing method and raise a NoMethodError if the method does not exist.&lt;/p>; &lt;h2>; [9] What is the difference between a proc and a lambda in Ruby? &lt;/h2>; &lt;p>;A proc in Ruby is a block of code that can be stored in a variable and passed around like an object. It is created using the proc keyword or the Proc.new method. A lambda is similar to a proc, but it has stricter rules for argument checking and return behavior. It is created using the lambda keyword or the -&amp;gt; operator. Here is an example of using a proc and a lambda:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;nb&quot;>;proc&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;nb&quot;>;proc&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;nb&quot;>;proc&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;call&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs 1&lt;/span>; &lt;span class=&quot;nb&quot;>;lambda&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;o&quot;>;-&amp;gt;&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;nb&quot;>;puts&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;nb&quot;>;lambda&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;call&lt;/span>;&lt;span class=&quot;p&quot;>;(&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;)&lt;/span>; &lt;span class=&quot;c1&quot;>;# outputs 1&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>; &lt;h2>; [10] What is the difference between the map and collect methods in Ruby? &lt;/h2>; &lt;p>;The map and collect methods in Ruby are both used to transform a collection of items by applying a block of code to each item and returning a new collection with the transformed items. The main difference between the two methods is that map returns a new array, while collect returns a new object of the same type as the original collection. Here is an example of using the map and collect methods:&lt;br>; &lt;/p>; &lt;div class=&quot;highlight js-code-highlight&quot;>; &lt;pre class=&quot;highlight ruby&quot;>;&lt;code>;&lt;span class=&quot;n&quot;>;array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;mi&quot;>;3&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;n&quot;>;new_array&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;n&quot;>;array&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;map&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;x&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;n&quot;>;x&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;c1&quot;>;# new_array is [2, 4, 6]&lt;/span>; &lt;span class=&quot;nb&quot;>;hash&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;ss&quot;>;a: &lt;/span>;&lt;span class=&quot;mi&quot;>;1&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;b: &lt;/span>;&lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;ss&quot;>;c: &lt;/span>;&lt;span class=&quot;mi&quot;>;3&lt;/span>; &lt;span class=&quot;p&quot;>;}&lt;/span>; &lt;span class=&quot;n&quot;>;new_hash&lt;/span>; &lt;span class=&quot;o&quot;>;=&lt;/span>; &lt;span class=&quot;nb&quot;>;hash&lt;/span>;&lt;span class=&quot;p&quot;>;.&lt;/span>;&lt;span class=&quot;nf&quot;>;collect&lt;/span>; &lt;span class=&quot;p&quot;>;{&lt;/span>; &lt;span class=&quot;o&quot;>;|&lt;/span>;&lt;span class=&quot;n&quot;>;k&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;v&lt;/span>;&lt;span class=&quot;o&quot;>;|&lt;/span>; &lt;span class=&quot;p&quot;>;[&lt;/span>;&lt;span class=&quot;n&quot;>;k&lt;/span>;&lt;span class=&quot;p&quot;>;,&lt;/span>; &lt;span class=&quot;n&quot;>;v&lt;/span>; &lt;span class=&quot;o&quot;>;*&lt;/span>; &lt;span class=&quot;mi&quot;>;2&lt;/span>;&lt;span class=&quot;p&quot;>;]&lt;/span>; &lt;span class=&quot;p&quot;>;}.&lt;/span>;&lt;span class=&quot;nf&quot;>;to_h&lt;/span>; &lt;span class=&quot;c1&quot;>;# new_hash is { a: 2, b: 4, c: 6 }&lt;/span>; &lt;/code>;&lt;/pre>; &lt;/div>;</description><category> ruby</category><category> programming</category><category> career</category></item></channel></rss>